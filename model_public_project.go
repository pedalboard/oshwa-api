/*
OSHWA API

# Introduction  Welcome to the OSHWA Open Source Hardware Certification API. We hope that you will use it to build on top of the OSHWA certification program. This documentation provides information on how to use the OSHWA REST API to view, create, and search OSHWA certified open source hardware projects. You can learn more about OSHWA [here](https://www.oshwa.org/about/) and more about OSHWA’s free open source hardware certification program [here](https://certification.oshwa.org/).  This API supports both read and write functions. You can use the read functions to pull information about certified hardware from the [directory](https://certification.oshwa.org/list.html) in order to explore and present it in new ways. We encourage you to use it to find new ways to understand and visualize the world of open source hardware!  You can use the write functions to make it easier to submit registration applications to the program. Originally, the only way to submit hardware for registration was through OSHWA’s [application form](https://application.oshwa.org/apply). We hope that the write functionality will make it easier to integrate certification applications into existing workflows, and to connect platforms that already host open source hardware to the certification program.    If you have questions or comments about the API, please email us at info@oshwa.org.  We would also love to know how you use the API! We encourage you to contact us at info@oshwa.org, or let us know on twitter at @OHSummit.  # Tools This API is documented in **OpenAPI format**. It is built with [Swagger](http://swagger.io) and [ReDoc](https://github.com/Redocly/redoc).  # Using the API In order to use the API, you must register for an API key. You can get your own API key [here](https://certificationapi.oshwa.org/). If your token is not included or is invalid, the API will return an error. If you'd like to test the endpoints, check out our [Swagger](/endpoints) implementation, where you will be able to request a key, add the key to your requests, and explore OSHWA certified projects. You will also find code examples in this documentation.  # Pagination Project and Company results are returned in a wrapper object that contains total, limit, and offset values, which are useful for paginating over results.   ``` {   \"total\": 200, // Total number of matching items   \"offset\": 0, // Number of items skipped in request   \"limit\": 100, // Max number of items in request   \"items\": [ {...} ] // List of items } ```  The default `limit` for requests is 100, and the maximum `limit` is 1000. The default `offset` is 0. The above request returns the first 100 items. To get the next 100 items, the `offset` would be changed to 100. These parameters can be used to loop through the api and retrieve all items.  All items are returned in alphabetical order by `projectName`.   # Authentication  All OSHWA API endpoints require Bearer Token Authentication.  You can get an API key [here](https://certificationapi.oshwa.org/).  # Errors  The OSHWA API uses HTTP response status codes to indicate whether the response was successful. Detailed information about the response and how any errors might be resolved can be found in the body of the error message.  ``` {     \"error\": {         \"statusCode\": 422,         \"errorCode\": \"Unprocessable Entity\",         \"message\": \"Validation Error: Input validation failed\",         \"details\": [             {                 \"msg\": \"Responsible Party Type is required\",                 \"param\": \"responsiblePartyType\",                 \"location\": \"body\"             },         ]     } } ``` 

API version: 1.0.0
Contact: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PublicProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicProject{}

// PublicProject struct for PublicProject
type PublicProject struct {
	// Assigned by OSHWA admin
	OshwaUid *string `json:"oshwaUid,omitempty"`
	// Name of Individual, Company, or Organization Responsible for the Certified Item. Required.
	ResponsibleParty *string `json:"responsibleParty,omitempty"`
	Country *string `json:"country,omitempty"`
	PublicContact *string `json:"publicContact,omitempty"`
	ProjectName *string `json:"projectName,omitempty"`
	ProjectWebsite *string `json:"projectWebsite,omitempty"`
	// e.g. 1.0
	ProjectVersion *string `json:"projectVersion,omitempty"`
	// An array of OSHWA UIDs
	PreviousVersions []string `json:"previousVersions,omitempty"`
	ProjectDescription *string `json:"projectDescription,omitempty"`
	// Primary project type. The GET api/options endpoint provides all valid options.
	PrimaryType *string `json:"primaryType,omitempty"`
	// Additional project types. The GET api/options endpoint provides all valid options.
	AdditionalType []string `json:"additionalType,omitempty"`
	// Additional searchable keywords
	ProjectKeywords []string `json:"projectKeywords,omitempty"`
	// If the project incorporates or builds upon other open projects that are not currently certified by OSHWA, this field can be used to cite those projects.
	Citations []ProjectCitationsInner `json:"citations,omitempty"`
	// URL for project documentation
	DocumentationUrl *string `json:"documentationUrl,omitempty"`
	// The GET api/options endpoint provides all valid options.
	HardwareLicense *string `json:"hardwareLicense,omitempty"`
	// The GET api/options endpoint provides all valid options.
	SoftwareLicense *string `json:"softwareLicense,omitempty"`
	// The GET api/options endpoint provides all valid options.
	DocumentationLicense *string `json:"documentationLicense,omitempty"`
	// Certification date
	CertificationDate *string `json:"certificationDate,omitempty"`
}

// NewPublicProject instantiates a new PublicProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicProject() *PublicProject {
	this := PublicProject{}
	return &this
}

// NewPublicProjectWithDefaults instantiates a new PublicProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicProjectWithDefaults() *PublicProject {
	this := PublicProject{}
	return &this
}

// GetOshwaUid returns the OshwaUid field value if set, zero value otherwise.
func (o *PublicProject) GetOshwaUid() string {
	if o == nil || IsNil(o.OshwaUid) {
		var ret string
		return ret
	}
	return *o.OshwaUid
}

// GetOshwaUidOk returns a tuple with the OshwaUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetOshwaUidOk() (*string, bool) {
	if o == nil || IsNil(o.OshwaUid) {
		return nil, false
	}
	return o.OshwaUid, true
}

// HasOshwaUid returns a boolean if a field has been set.
func (o *PublicProject) HasOshwaUid() bool {
	if o != nil && !IsNil(o.OshwaUid) {
		return true
	}

	return false
}

// SetOshwaUid gets a reference to the given string and assigns it to the OshwaUid field.
func (o *PublicProject) SetOshwaUid(v string) {
	o.OshwaUid = &v
}

// GetResponsibleParty returns the ResponsibleParty field value if set, zero value otherwise.
func (o *PublicProject) GetResponsibleParty() string {
	if o == nil || IsNil(o.ResponsibleParty) {
		var ret string
		return ret
	}
	return *o.ResponsibleParty
}

// GetResponsiblePartyOk returns a tuple with the ResponsibleParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetResponsiblePartyOk() (*string, bool) {
	if o == nil || IsNil(o.ResponsibleParty) {
		return nil, false
	}
	return o.ResponsibleParty, true
}

// HasResponsibleParty returns a boolean if a field has been set.
func (o *PublicProject) HasResponsibleParty() bool {
	if o != nil && !IsNil(o.ResponsibleParty) {
		return true
	}

	return false
}

// SetResponsibleParty gets a reference to the given string and assigns it to the ResponsibleParty field.
func (o *PublicProject) SetResponsibleParty(v string) {
	o.ResponsibleParty = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PublicProject) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PublicProject) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PublicProject) SetCountry(v string) {
	o.Country = &v
}

// GetPublicContact returns the PublicContact field value if set, zero value otherwise.
func (o *PublicProject) GetPublicContact() string {
	if o == nil || IsNil(o.PublicContact) {
		var ret string
		return ret
	}
	return *o.PublicContact
}

// GetPublicContactOk returns a tuple with the PublicContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetPublicContactOk() (*string, bool) {
	if o == nil || IsNil(o.PublicContact) {
		return nil, false
	}
	return o.PublicContact, true
}

// HasPublicContact returns a boolean if a field has been set.
func (o *PublicProject) HasPublicContact() bool {
	if o != nil && !IsNil(o.PublicContact) {
		return true
	}

	return false
}

// SetPublicContact gets a reference to the given string and assigns it to the PublicContact field.
func (o *PublicProject) SetPublicContact(v string) {
	o.PublicContact = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *PublicProject) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *PublicProject) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *PublicProject) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetProjectWebsite returns the ProjectWebsite field value if set, zero value otherwise.
func (o *PublicProject) GetProjectWebsite() string {
	if o == nil || IsNil(o.ProjectWebsite) {
		var ret string
		return ret
	}
	return *o.ProjectWebsite
}

// GetProjectWebsiteOk returns a tuple with the ProjectWebsite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetProjectWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectWebsite) {
		return nil, false
	}
	return o.ProjectWebsite, true
}

// HasProjectWebsite returns a boolean if a field has been set.
func (o *PublicProject) HasProjectWebsite() bool {
	if o != nil && !IsNil(o.ProjectWebsite) {
		return true
	}

	return false
}

// SetProjectWebsite gets a reference to the given string and assigns it to the ProjectWebsite field.
func (o *PublicProject) SetProjectWebsite(v string) {
	o.ProjectWebsite = &v
}

// GetProjectVersion returns the ProjectVersion field value if set, zero value otherwise.
func (o *PublicProject) GetProjectVersion() string {
	if o == nil || IsNil(o.ProjectVersion) {
		var ret string
		return ret
	}
	return *o.ProjectVersion
}

// GetProjectVersionOk returns a tuple with the ProjectVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetProjectVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectVersion) {
		return nil, false
	}
	return o.ProjectVersion, true
}

// HasProjectVersion returns a boolean if a field has been set.
func (o *PublicProject) HasProjectVersion() bool {
	if o != nil && !IsNil(o.ProjectVersion) {
		return true
	}

	return false
}

// SetProjectVersion gets a reference to the given string and assigns it to the ProjectVersion field.
func (o *PublicProject) SetProjectVersion(v string) {
	o.ProjectVersion = &v
}

// GetPreviousVersions returns the PreviousVersions field value if set, zero value otherwise.
func (o *PublicProject) GetPreviousVersions() []string {
	if o == nil || IsNil(o.PreviousVersions) {
		var ret []string
		return ret
	}
	return o.PreviousVersions
}

// GetPreviousVersionsOk returns a tuple with the PreviousVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetPreviousVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousVersions) {
		return nil, false
	}
	return o.PreviousVersions, true
}

// HasPreviousVersions returns a boolean if a field has been set.
func (o *PublicProject) HasPreviousVersions() bool {
	if o != nil && !IsNil(o.PreviousVersions) {
		return true
	}

	return false
}

// SetPreviousVersions gets a reference to the given []string and assigns it to the PreviousVersions field.
func (o *PublicProject) SetPreviousVersions(v []string) {
	o.PreviousVersions = v
}

// GetProjectDescription returns the ProjectDescription field value if set, zero value otherwise.
func (o *PublicProject) GetProjectDescription() string {
	if o == nil || IsNil(o.ProjectDescription) {
		var ret string
		return ret
	}
	return *o.ProjectDescription
}

// GetProjectDescriptionOk returns a tuple with the ProjectDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetProjectDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectDescription) {
		return nil, false
	}
	return o.ProjectDescription, true
}

// HasProjectDescription returns a boolean if a field has been set.
func (o *PublicProject) HasProjectDescription() bool {
	if o != nil && !IsNil(o.ProjectDescription) {
		return true
	}

	return false
}

// SetProjectDescription gets a reference to the given string and assigns it to the ProjectDescription field.
func (o *PublicProject) SetProjectDescription(v string) {
	o.ProjectDescription = &v
}

// GetPrimaryType returns the PrimaryType field value if set, zero value otherwise.
func (o *PublicProject) GetPrimaryType() string {
	if o == nil || IsNil(o.PrimaryType) {
		var ret string
		return ret
	}
	return *o.PrimaryType
}

// GetPrimaryTypeOk returns a tuple with the PrimaryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetPrimaryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryType) {
		return nil, false
	}
	return o.PrimaryType, true
}

// HasPrimaryType returns a boolean if a field has been set.
func (o *PublicProject) HasPrimaryType() bool {
	if o != nil && !IsNil(o.PrimaryType) {
		return true
	}

	return false
}

// SetPrimaryType gets a reference to the given string and assigns it to the PrimaryType field.
func (o *PublicProject) SetPrimaryType(v string) {
	o.PrimaryType = &v
}

// GetAdditionalType returns the AdditionalType field value if set, zero value otherwise.
func (o *PublicProject) GetAdditionalType() []string {
	if o == nil || IsNil(o.AdditionalType) {
		var ret []string
		return ret
	}
	return o.AdditionalType
}

// GetAdditionalTypeOk returns a tuple with the AdditionalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetAdditionalTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalType) {
		return nil, false
	}
	return o.AdditionalType, true
}

// HasAdditionalType returns a boolean if a field has been set.
func (o *PublicProject) HasAdditionalType() bool {
	if o != nil && !IsNil(o.AdditionalType) {
		return true
	}

	return false
}

// SetAdditionalType gets a reference to the given []string and assigns it to the AdditionalType field.
func (o *PublicProject) SetAdditionalType(v []string) {
	o.AdditionalType = v
}

// GetProjectKeywords returns the ProjectKeywords field value if set, zero value otherwise.
func (o *PublicProject) GetProjectKeywords() []string {
	if o == nil || IsNil(o.ProjectKeywords) {
		var ret []string
		return ret
	}
	return o.ProjectKeywords
}

// GetProjectKeywordsOk returns a tuple with the ProjectKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetProjectKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectKeywords) {
		return nil, false
	}
	return o.ProjectKeywords, true
}

// HasProjectKeywords returns a boolean if a field has been set.
func (o *PublicProject) HasProjectKeywords() bool {
	if o != nil && !IsNil(o.ProjectKeywords) {
		return true
	}

	return false
}

// SetProjectKeywords gets a reference to the given []string and assigns it to the ProjectKeywords field.
func (o *PublicProject) SetProjectKeywords(v []string) {
	o.ProjectKeywords = v
}

// GetCitations returns the Citations field value if set, zero value otherwise.
func (o *PublicProject) GetCitations() []ProjectCitationsInner {
	if o == nil || IsNil(o.Citations) {
		var ret []ProjectCitationsInner
		return ret
	}
	return o.Citations
}

// GetCitationsOk returns a tuple with the Citations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetCitationsOk() ([]ProjectCitationsInner, bool) {
	if o == nil || IsNil(o.Citations) {
		return nil, false
	}
	return o.Citations, true
}

// HasCitations returns a boolean if a field has been set.
func (o *PublicProject) HasCitations() bool {
	if o != nil && !IsNil(o.Citations) {
		return true
	}

	return false
}

// SetCitations gets a reference to the given []ProjectCitationsInner and assigns it to the Citations field.
func (o *PublicProject) SetCitations(v []ProjectCitationsInner) {
	o.Citations = v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *PublicProject) GetDocumentationUrl() string {
	if o == nil || IsNil(o.DocumentationUrl) {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentationUrl) {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *PublicProject) HasDocumentationUrl() bool {
	if o != nil && !IsNil(o.DocumentationUrl) {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *PublicProject) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetHardwareLicense returns the HardwareLicense field value if set, zero value otherwise.
func (o *PublicProject) GetHardwareLicense() string {
	if o == nil || IsNil(o.HardwareLicense) {
		var ret string
		return ret
	}
	return *o.HardwareLicense
}

// GetHardwareLicenseOk returns a tuple with the HardwareLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetHardwareLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.HardwareLicense) {
		return nil, false
	}
	return o.HardwareLicense, true
}

// HasHardwareLicense returns a boolean if a field has been set.
func (o *PublicProject) HasHardwareLicense() bool {
	if o != nil && !IsNil(o.HardwareLicense) {
		return true
	}

	return false
}

// SetHardwareLicense gets a reference to the given string and assigns it to the HardwareLicense field.
func (o *PublicProject) SetHardwareLicense(v string) {
	o.HardwareLicense = &v
}

// GetSoftwareLicense returns the SoftwareLicense field value if set, zero value otherwise.
func (o *PublicProject) GetSoftwareLicense() string {
	if o == nil || IsNil(o.SoftwareLicense) {
		var ret string
		return ret
	}
	return *o.SoftwareLicense
}

// GetSoftwareLicenseOk returns a tuple with the SoftwareLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetSoftwareLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareLicense) {
		return nil, false
	}
	return o.SoftwareLicense, true
}

// HasSoftwareLicense returns a boolean if a field has been set.
func (o *PublicProject) HasSoftwareLicense() bool {
	if o != nil && !IsNil(o.SoftwareLicense) {
		return true
	}

	return false
}

// SetSoftwareLicense gets a reference to the given string and assigns it to the SoftwareLicense field.
func (o *PublicProject) SetSoftwareLicense(v string) {
	o.SoftwareLicense = &v
}

// GetDocumentationLicense returns the DocumentationLicense field value if set, zero value otherwise.
func (o *PublicProject) GetDocumentationLicense() string {
	if o == nil || IsNil(o.DocumentationLicense) {
		var ret string
		return ret
	}
	return *o.DocumentationLicense
}

// GetDocumentationLicenseOk returns a tuple with the DocumentationLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetDocumentationLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentationLicense) {
		return nil, false
	}
	return o.DocumentationLicense, true
}

// HasDocumentationLicense returns a boolean if a field has been set.
func (o *PublicProject) HasDocumentationLicense() bool {
	if o != nil && !IsNil(o.DocumentationLicense) {
		return true
	}

	return false
}

// SetDocumentationLicense gets a reference to the given string and assigns it to the DocumentationLicense field.
func (o *PublicProject) SetDocumentationLicense(v string) {
	o.DocumentationLicense = &v
}

// GetCertificationDate returns the CertificationDate field value if set, zero value otherwise.
func (o *PublicProject) GetCertificationDate() string {
	if o == nil || IsNil(o.CertificationDate) {
		var ret string
		return ret
	}
	return *o.CertificationDate
}

// GetCertificationDateOk returns a tuple with the CertificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicProject) GetCertificationDateOk() (*string, bool) {
	if o == nil || IsNil(o.CertificationDate) {
		return nil, false
	}
	return o.CertificationDate, true
}

// HasCertificationDate returns a boolean if a field has been set.
func (o *PublicProject) HasCertificationDate() bool {
	if o != nil && !IsNil(o.CertificationDate) {
		return true
	}

	return false
}

// SetCertificationDate gets a reference to the given string and assigns it to the CertificationDate field.
func (o *PublicProject) SetCertificationDate(v string) {
	o.CertificationDate = &v
}

func (o PublicProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OshwaUid) {
		toSerialize["oshwaUid"] = o.OshwaUid
	}
	if !IsNil(o.ResponsibleParty) {
		toSerialize["responsibleParty"] = o.ResponsibleParty
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.PublicContact) {
		toSerialize["publicContact"] = o.PublicContact
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if !IsNil(o.ProjectWebsite) {
		toSerialize["projectWebsite"] = o.ProjectWebsite
	}
	if !IsNil(o.ProjectVersion) {
		toSerialize["projectVersion"] = o.ProjectVersion
	}
	if !IsNil(o.PreviousVersions) {
		toSerialize["previousVersions"] = o.PreviousVersions
	}
	if !IsNil(o.ProjectDescription) {
		toSerialize["projectDescription"] = o.ProjectDescription
	}
	if !IsNil(o.PrimaryType) {
		toSerialize["primaryType"] = o.PrimaryType
	}
	if !IsNil(o.AdditionalType) {
		toSerialize["additionalType"] = o.AdditionalType
	}
	if !IsNil(o.ProjectKeywords) {
		toSerialize["projectKeywords"] = o.ProjectKeywords
	}
	if !IsNil(o.Citations) {
		toSerialize["citations"] = o.Citations
	}
	if !IsNil(o.DocumentationUrl) {
		toSerialize["documentationUrl"] = o.DocumentationUrl
	}
	if !IsNil(o.HardwareLicense) {
		toSerialize["hardwareLicense"] = o.HardwareLicense
	}
	if !IsNil(o.SoftwareLicense) {
		toSerialize["softwareLicense"] = o.SoftwareLicense
	}
	if !IsNil(o.DocumentationLicense) {
		toSerialize["documentationLicense"] = o.DocumentationLicense
	}
	if !IsNil(o.CertificationDate) {
		toSerialize["certificationDate"] = o.CertificationDate
	}
	return toSerialize, nil
}

type NullablePublicProject struct {
	value *PublicProject
	isSet bool
}

func (v NullablePublicProject) Get() *PublicProject {
	return v.value
}

func (v *NullablePublicProject) Set(val *PublicProject) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicProject) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicProject(val *PublicProject) *NullablePublicProject {
	return &NullablePublicProject{value: val, isSet: true}
}

func (v NullablePublicProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



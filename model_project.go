/*
OSHWA API

# Introduction  Welcome to the OSHWA Open Source Hardware Certification API. We hope that you will use it to build on top of the OSHWA certification program. This documentation provides information on how to use the OSHWA REST API to view, create, and search OSHWA certified open source hardware projects. You can learn more about OSHWA [here](https://www.oshwa.org/about/) and more about OSHWA’s free open source hardware certification program [here](https://certification.oshwa.org/).  This API supports both read and write functions. You can use the read functions to pull information about certified hardware from the [directory](https://certification.oshwa.org/list.html) in order to explore and present it in new ways. We encourage you to use it to find new ways to understand and visualize the world of open source hardware!  You can use the write functions to make it easier to submit registration applications to the program. Originally, the only way to submit hardware for registration was through OSHWA’s [application form](https://application.oshwa.org/apply). We hope that the write functionality will make it easier to integrate certification applications into existing workflows, and to connect platforms that already host open source hardware to the certification program.    If you have questions or comments about the API, please email us at info@oshwa.org.  We would also love to know how you use the API! We encourage you to contact us at info@oshwa.org, or let us know on twitter at @OHSummit.  # Tools This API is documented in **OpenAPI format**. It is built with [Swagger](http://swagger.io) and [ReDoc](https://github.com/Redocly/redoc).  # Using the API In order to use the API, you must register for an API key. You can get your own API key [here](https://certificationapi.oshwa.org/). If your token is not included or is invalid, the API will return an error. If you'd like to test the endpoints, check out our [Swagger](/endpoints) implementation, where you will be able to request a key, add the key to your requests, and explore OSHWA certified projects. You will also find code examples in this documentation.  # Pagination Project and Company results are returned in a wrapper object that contains total, limit, and offset values, which are useful for paginating over results.   ``` {   \"total\": 200, // Total number of matching items   \"offset\": 0, // Number of items skipped in request   \"limit\": 100, // Max number of items in request   \"items\": [ {...} ] // List of items } ```  The default `limit` for requests is 100, and the maximum `limit` is 1000. The default `offset` is 0. The above request returns the first 100 items. To get the next 100 items, the `offset` would be changed to 100. These parameters can be used to loop through the api and retrieve all items.  All items are returned in alphabetical order by `projectName`.   # Authentication  All OSHWA API endpoints require Bearer Token Authentication.  You can get an API key [here](https://certificationapi.oshwa.org/).  # Errors  The OSHWA API uses HTTP response status codes to indicate whether the response was successful. Detailed information about the response and how any errors might be resolved can be found in the body of the error message.  ``` {     \"error\": {         \"statusCode\": 422,         \"errorCode\": \"Unprocessable Entity\",         \"message\": \"Validation Error: Input validation failed\",         \"details\": [             {                 \"msg\": \"Responsible Party Type is required\",                 \"param\": \"responsiblePartyType\",                 \"location\": \"body\"             },         ]     } } ``` 

API version: 1.0.0
Contact: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	// Responsible party type. Must be either \"Individual\", \"Company\", or \"Organization\". Required.
	ResponsiblePartyType string `json:"responsiblePartyType"`
	// Name of Individual, Company, or Organization Responsible for the Certified Item. Required.
	ResponsibleParty string `json:"responsibleParty"`
	// If not an Individual, name of Individual with Authority to Bind the Company or Organization. Required only if responsiblePartyType is not \"Individual\".
	BindingParty string `json:"bindingParty"`
	Country string `json:"country"`
	StreetAddress1 *string `json:"streetAddress1,omitempty"`
	StreetAddress2 *string `json:"streetAddress2,omitempty"`
	City *string `json:"city,omitempty"`
	State *string `json:"state,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	PrivateContact *string `json:"privateContact,omitempty"`
	PublicContact *string `json:"publicContact,omitempty"`
	ProjectName string `json:"projectName"`
	ProjectWebsite *string `json:"projectWebsite,omitempty"`
	// e.g. 1.0
	ProjectVersion *string `json:"projectVersion,omitempty"`
	// An array of OSHWA UIDs
	PreviousVersions []string `json:"previousVersions,omitempty"`
	ProjectDescription *string `json:"projectDescription,omitempty"`
	// Primary project type. The GET api/options endpoint provides all valid options.
	PrimaryType string `json:"primaryType"`
	// Additional project types. The GET api/options endpoint provides all valid options.
	AdditionalType []string `json:"additionalType,omitempty"`
	// Additional searchable keywords
	ProjectKeywords []string `json:"projectKeywords,omitempty"`
	// If the project incorporates or builds upon other open projects that are not currently certified by OSHWA, this field can be used to cite those projects.
	Citations []ProjectCitationsInner `json:"citations,omitempty"`
	// URL for project documentation
	DocumentationUrl *string `json:"documentationUrl,omitempty"`
	// All project documentation and design files are available in the preferred format for making changes.
	AvailableFileFormat *bool `json:"availableFileFormat,omitempty"`
	// The GET api/options endpoint provides all valid options.
	HardwareLicense string `json:"hardwareLicense"`
	// The GET api/options endpoint provides all valid options.
	SoftwareLicense string `json:"softwareLicense"`
	// The GET api/options endpoint provides all valid options.
	DocumentationLicense string `json:"documentationLicense"`
	// The project is licensed in a way to allow for modifications and derivative works without commercial restriction.
	NoCommercialRestriction string `json:"noCommercialRestriction"`
	// Explanation is required if noCommercialRestriction is false.
	ExplanationNcr string `json:"explanationNcr"`
	// There is no restriction within my control to selling or giving away the project documentation.
	NoDocumentationRestriction bool `json:"noDocumentationRestriction"`
	// Explanation is required if noDocumentationRestriction is false.
	ExplanationNdr string `json:"explanationNdr"`
	// Where possible, I have chosen to use components in my hardware that are openly licensed.
	OpenHardwareComponents bool `json:"openHardwareComponents"`
	// Explanation is required if openHardwareComponents is false.
	ExplanationOhwc string `json:"explanationOhwc"`
	// I understand and comply with the \"Creator Contribution requirement,\" explained in the Requirements for Certification.
	CreatorContribution bool `json:"creatorContribution"`
	// Explanation is required if creatorContribution is false.
	ExplanationCcr string `json:"explanationCcr"`
	// There is no restriction on the use by persons or groups, or by the field of endeavor.
	NoUseRestriction bool `json:"noUseRestriction"`
	// Explanation is required if noUseRestriction is false.
	ExplanationNur string `json:"explanationNur"`
	// The rights granted by any license on the project applies to all whom the work is redistributed to.
	RedistributedWork bool `json:"redistributedWork"`
	// Explanation is required if redistributedWork is false.
	ExplanationRwr string `json:"explanationRwr"`
	// The rights granted under any license on the project do not depend on the licensed work being part of a specific product.
	NoSpecificProduct bool `json:"noSpecificProduct"`
	// Explanation is required if noSpecificProduct is false.
	ExplanationNsp string `json:"explanationNsp"`
	// The rights granted under any license on the project do not restrict other hardware or software, for example by requiring that all other hardware or software sold with the item be open source.
	NoComponentRestriction bool `json:"noComponentRestriction"`
	// Explanation is required if noComponentRestriction is false.
	ExplanationNor string `json:"explanationNor"`
	// The rights granted under any license on the project are technology neutral.
	TechnologyNeutral bool `json:"technologyNeutral"`
	// Explanation is required if technologyNeutral is false.
	ExplanationTn string `json:"explanationTn"`
	CertificationMarkTerms ProjectCertificationMarkTerms `json:"certificationMarkTerms"`
	// Explanation for certification mark terms
	ExplanationCertificationTerms string `json:"explanationCertificationTerms"`
	// Relationship
	Relationship string `json:"relationship"`
	// Agreement to terms
	AgreementTerms bool `json:"agreementTerms"`
	// Parent name
	ParentName string `json:"parentName"`
}

type _Project Project

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(responsiblePartyType string, responsibleParty string, bindingParty string, country string, projectName string, primaryType string, hardwareLicense string, softwareLicense string, documentationLicense string, noCommercialRestriction string, explanationNcr string, noDocumentationRestriction bool, explanationNdr string, openHardwareComponents bool, explanationOhwc string, creatorContribution bool, explanationCcr string, noUseRestriction bool, explanationNur string, redistributedWork bool, explanationRwr string, noSpecificProduct bool, explanationNsp string, noComponentRestriction bool, explanationNor string, technologyNeutral bool, explanationTn string, certificationMarkTerms ProjectCertificationMarkTerms, explanationCertificationTerms string, relationship string, agreementTerms bool, parentName string) *Project {
	this := Project{}
	this.ResponsiblePartyType = responsiblePartyType
	this.ResponsibleParty = responsibleParty
	this.BindingParty = bindingParty
	this.Country = country
	this.ProjectName = projectName
	this.PrimaryType = primaryType
	this.HardwareLicense = hardwareLicense
	this.SoftwareLicense = softwareLicense
	this.DocumentationLicense = documentationLicense
	this.NoCommercialRestriction = noCommercialRestriction
	this.ExplanationNcr = explanationNcr
	this.NoDocumentationRestriction = noDocumentationRestriction
	this.ExplanationNdr = explanationNdr
	this.OpenHardwareComponents = openHardwareComponents
	this.ExplanationOhwc = explanationOhwc
	this.CreatorContribution = creatorContribution
	this.ExplanationCcr = explanationCcr
	this.NoUseRestriction = noUseRestriction
	this.ExplanationNur = explanationNur
	this.RedistributedWork = redistributedWork
	this.ExplanationRwr = explanationRwr
	this.NoSpecificProduct = noSpecificProduct
	this.ExplanationNsp = explanationNsp
	this.NoComponentRestriction = noComponentRestriction
	this.ExplanationNor = explanationNor
	this.TechnologyNeutral = technologyNeutral
	this.ExplanationTn = explanationTn
	this.CertificationMarkTerms = certificationMarkTerms
	this.ExplanationCertificationTerms = explanationCertificationTerms
	this.Relationship = relationship
	this.AgreementTerms = agreementTerms
	this.ParentName = parentName
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetResponsiblePartyType returns the ResponsiblePartyType field value
func (o *Project) GetResponsiblePartyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponsiblePartyType
}

// GetResponsiblePartyTypeOk returns a tuple with the ResponsiblePartyType field value
// and a boolean to check if the value has been set.
func (o *Project) GetResponsiblePartyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponsiblePartyType, true
}

// SetResponsiblePartyType sets field value
func (o *Project) SetResponsiblePartyType(v string) {
	o.ResponsiblePartyType = v
}

// GetResponsibleParty returns the ResponsibleParty field value
func (o *Project) GetResponsibleParty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponsibleParty
}

// GetResponsiblePartyOk returns a tuple with the ResponsibleParty field value
// and a boolean to check if the value has been set.
func (o *Project) GetResponsiblePartyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponsibleParty, true
}

// SetResponsibleParty sets field value
func (o *Project) SetResponsibleParty(v string) {
	o.ResponsibleParty = v
}

// GetBindingParty returns the BindingParty field value
func (o *Project) GetBindingParty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BindingParty
}

// GetBindingPartyOk returns a tuple with the BindingParty field value
// and a boolean to check if the value has been set.
func (o *Project) GetBindingPartyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BindingParty, true
}

// SetBindingParty sets field value
func (o *Project) SetBindingParty(v string) {
	o.BindingParty = v
}

// GetCountry returns the Country field value
func (o *Project) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Project) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Project) SetCountry(v string) {
	o.Country = v
}

// GetStreetAddress1 returns the StreetAddress1 field value if set, zero value otherwise.
func (o *Project) GetStreetAddress1() string {
	if o == nil || IsNil(o.StreetAddress1) {
		var ret string
		return ret
	}
	return *o.StreetAddress1
}

// GetStreetAddress1Ok returns a tuple with the StreetAddress1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetStreetAddress1Ok() (*string, bool) {
	if o == nil || IsNil(o.StreetAddress1) {
		return nil, false
	}
	return o.StreetAddress1, true
}

// HasStreetAddress1 returns a boolean if a field has been set.
func (o *Project) HasStreetAddress1() bool {
	if o != nil && !IsNil(o.StreetAddress1) {
		return true
	}

	return false
}

// SetStreetAddress1 gets a reference to the given string and assigns it to the StreetAddress1 field.
func (o *Project) SetStreetAddress1(v string) {
	o.StreetAddress1 = &v
}

// GetStreetAddress2 returns the StreetAddress2 field value if set, zero value otherwise.
func (o *Project) GetStreetAddress2() string {
	if o == nil || IsNil(o.StreetAddress2) {
		var ret string
		return ret
	}
	return *o.StreetAddress2
}

// GetStreetAddress2Ok returns a tuple with the StreetAddress2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetStreetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.StreetAddress2) {
		return nil, false
	}
	return o.StreetAddress2, true
}

// HasStreetAddress2 returns a boolean if a field has been set.
func (o *Project) HasStreetAddress2() bool {
	if o != nil && !IsNil(o.StreetAddress2) {
		return true
	}

	return false
}

// SetStreetAddress2 gets a reference to the given string and assigns it to the StreetAddress2 field.
func (o *Project) SetStreetAddress2(v string) {
	o.StreetAddress2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Project) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Project) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Project) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Project) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Project) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Project) SetState(v string) {
	o.State = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *Project) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *Project) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *Project) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetPrivateContact returns the PrivateContact field value if set, zero value otherwise.
func (o *Project) GetPrivateContact() string {
	if o == nil || IsNil(o.PrivateContact) {
		var ret string
		return ret
	}
	return *o.PrivateContact
}

// GetPrivateContactOk returns a tuple with the PrivateContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPrivateContactOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateContact) {
		return nil, false
	}
	return o.PrivateContact, true
}

// HasPrivateContact returns a boolean if a field has been set.
func (o *Project) HasPrivateContact() bool {
	if o != nil && !IsNil(o.PrivateContact) {
		return true
	}

	return false
}

// SetPrivateContact gets a reference to the given string and assigns it to the PrivateContact field.
func (o *Project) SetPrivateContact(v string) {
	o.PrivateContact = &v
}

// GetPublicContact returns the PublicContact field value if set, zero value otherwise.
func (o *Project) GetPublicContact() string {
	if o == nil || IsNil(o.PublicContact) {
		var ret string
		return ret
	}
	return *o.PublicContact
}

// GetPublicContactOk returns a tuple with the PublicContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPublicContactOk() (*string, bool) {
	if o == nil || IsNil(o.PublicContact) {
		return nil, false
	}
	return o.PublicContact, true
}

// HasPublicContact returns a boolean if a field has been set.
func (o *Project) HasPublicContact() bool {
	if o != nil && !IsNil(o.PublicContact) {
		return true
	}

	return false
}

// SetPublicContact gets a reference to the given string and assigns it to the PublicContact field.
func (o *Project) SetPublicContact(v string) {
	o.PublicContact = &v
}

// GetProjectName returns the ProjectName field value
func (o *Project) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *Project) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *Project) SetProjectName(v string) {
	o.ProjectName = v
}

// GetProjectWebsite returns the ProjectWebsite field value if set, zero value otherwise.
func (o *Project) GetProjectWebsite() string {
	if o == nil || IsNil(o.ProjectWebsite) {
		var ret string
		return ret
	}
	return *o.ProjectWebsite
}

// GetProjectWebsiteOk returns a tuple with the ProjectWebsite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectWebsite) {
		return nil, false
	}
	return o.ProjectWebsite, true
}

// HasProjectWebsite returns a boolean if a field has been set.
func (o *Project) HasProjectWebsite() bool {
	if o != nil && !IsNil(o.ProjectWebsite) {
		return true
	}

	return false
}

// SetProjectWebsite gets a reference to the given string and assigns it to the ProjectWebsite field.
func (o *Project) SetProjectWebsite(v string) {
	o.ProjectWebsite = &v
}

// GetProjectVersion returns the ProjectVersion field value if set, zero value otherwise.
func (o *Project) GetProjectVersion() string {
	if o == nil || IsNil(o.ProjectVersion) {
		var ret string
		return ret
	}
	return *o.ProjectVersion
}

// GetProjectVersionOk returns a tuple with the ProjectVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectVersion) {
		return nil, false
	}
	return o.ProjectVersion, true
}

// HasProjectVersion returns a boolean if a field has been set.
func (o *Project) HasProjectVersion() bool {
	if o != nil && !IsNil(o.ProjectVersion) {
		return true
	}

	return false
}

// SetProjectVersion gets a reference to the given string and assigns it to the ProjectVersion field.
func (o *Project) SetProjectVersion(v string) {
	o.ProjectVersion = &v
}

// GetPreviousVersions returns the PreviousVersions field value if set, zero value otherwise.
func (o *Project) GetPreviousVersions() []string {
	if o == nil || IsNil(o.PreviousVersions) {
		var ret []string
		return ret
	}
	return o.PreviousVersions
}

// GetPreviousVersionsOk returns a tuple with the PreviousVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPreviousVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousVersions) {
		return nil, false
	}
	return o.PreviousVersions, true
}

// HasPreviousVersions returns a boolean if a field has been set.
func (o *Project) HasPreviousVersions() bool {
	if o != nil && !IsNil(o.PreviousVersions) {
		return true
	}

	return false
}

// SetPreviousVersions gets a reference to the given []string and assigns it to the PreviousVersions field.
func (o *Project) SetPreviousVersions(v []string) {
	o.PreviousVersions = v
}

// GetProjectDescription returns the ProjectDescription field value if set, zero value otherwise.
func (o *Project) GetProjectDescription() string {
	if o == nil || IsNil(o.ProjectDescription) {
		var ret string
		return ret
	}
	return *o.ProjectDescription
}

// GetProjectDescriptionOk returns a tuple with the ProjectDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectDescription) {
		return nil, false
	}
	return o.ProjectDescription, true
}

// HasProjectDescription returns a boolean if a field has been set.
func (o *Project) HasProjectDescription() bool {
	if o != nil && !IsNil(o.ProjectDescription) {
		return true
	}

	return false
}

// SetProjectDescription gets a reference to the given string and assigns it to the ProjectDescription field.
func (o *Project) SetProjectDescription(v string) {
	o.ProjectDescription = &v
}

// GetPrimaryType returns the PrimaryType field value
func (o *Project) GetPrimaryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryType
}

// GetPrimaryTypeOk returns a tuple with the PrimaryType field value
// and a boolean to check if the value has been set.
func (o *Project) GetPrimaryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryType, true
}

// SetPrimaryType sets field value
func (o *Project) SetPrimaryType(v string) {
	o.PrimaryType = v
}

// GetAdditionalType returns the AdditionalType field value if set, zero value otherwise.
func (o *Project) GetAdditionalType() []string {
	if o == nil || IsNil(o.AdditionalType) {
		var ret []string
		return ret
	}
	return o.AdditionalType
}

// GetAdditionalTypeOk returns a tuple with the AdditionalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetAdditionalTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalType) {
		return nil, false
	}
	return o.AdditionalType, true
}

// HasAdditionalType returns a boolean if a field has been set.
func (o *Project) HasAdditionalType() bool {
	if o != nil && !IsNil(o.AdditionalType) {
		return true
	}

	return false
}

// SetAdditionalType gets a reference to the given []string and assigns it to the AdditionalType field.
func (o *Project) SetAdditionalType(v []string) {
	o.AdditionalType = v
}

// GetProjectKeywords returns the ProjectKeywords field value if set, zero value otherwise.
func (o *Project) GetProjectKeywords() []string {
	if o == nil || IsNil(o.ProjectKeywords) {
		var ret []string
		return ret
	}
	return o.ProjectKeywords
}

// GetProjectKeywordsOk returns a tuple with the ProjectKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectKeywords) {
		return nil, false
	}
	return o.ProjectKeywords, true
}

// HasProjectKeywords returns a boolean if a field has been set.
func (o *Project) HasProjectKeywords() bool {
	if o != nil && !IsNil(o.ProjectKeywords) {
		return true
	}

	return false
}

// SetProjectKeywords gets a reference to the given []string and assigns it to the ProjectKeywords field.
func (o *Project) SetProjectKeywords(v []string) {
	o.ProjectKeywords = v
}

// GetCitations returns the Citations field value if set, zero value otherwise.
func (o *Project) GetCitations() []ProjectCitationsInner {
	if o == nil || IsNil(o.Citations) {
		var ret []ProjectCitationsInner
		return ret
	}
	return o.Citations
}

// GetCitationsOk returns a tuple with the Citations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCitationsOk() ([]ProjectCitationsInner, bool) {
	if o == nil || IsNil(o.Citations) {
		return nil, false
	}
	return o.Citations, true
}

// HasCitations returns a boolean if a field has been set.
func (o *Project) HasCitations() bool {
	if o != nil && !IsNil(o.Citations) {
		return true
	}

	return false
}

// SetCitations gets a reference to the given []ProjectCitationsInner and assigns it to the Citations field.
func (o *Project) SetCitations(v []ProjectCitationsInner) {
	o.Citations = v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *Project) GetDocumentationUrl() string {
	if o == nil || IsNil(o.DocumentationUrl) {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentationUrl) {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *Project) HasDocumentationUrl() bool {
	if o != nil && !IsNil(o.DocumentationUrl) {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *Project) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetAvailableFileFormat returns the AvailableFileFormat field value if set, zero value otherwise.
func (o *Project) GetAvailableFileFormat() bool {
	if o == nil || IsNil(o.AvailableFileFormat) {
		var ret bool
		return ret
	}
	return *o.AvailableFileFormat
}

// GetAvailableFileFormatOk returns a tuple with the AvailableFileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetAvailableFileFormatOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailableFileFormat) {
		return nil, false
	}
	return o.AvailableFileFormat, true
}

// HasAvailableFileFormat returns a boolean if a field has been set.
func (o *Project) HasAvailableFileFormat() bool {
	if o != nil && !IsNil(o.AvailableFileFormat) {
		return true
	}

	return false
}

// SetAvailableFileFormat gets a reference to the given bool and assigns it to the AvailableFileFormat field.
func (o *Project) SetAvailableFileFormat(v bool) {
	o.AvailableFileFormat = &v
}

// GetHardwareLicense returns the HardwareLicense field value
func (o *Project) GetHardwareLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HardwareLicense
}

// GetHardwareLicenseOk returns a tuple with the HardwareLicense field value
// and a boolean to check if the value has been set.
func (o *Project) GetHardwareLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HardwareLicense, true
}

// SetHardwareLicense sets field value
func (o *Project) SetHardwareLicense(v string) {
	o.HardwareLicense = v
}

// GetSoftwareLicense returns the SoftwareLicense field value
func (o *Project) GetSoftwareLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoftwareLicense
}

// GetSoftwareLicenseOk returns a tuple with the SoftwareLicense field value
// and a boolean to check if the value has been set.
func (o *Project) GetSoftwareLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftwareLicense, true
}

// SetSoftwareLicense sets field value
func (o *Project) SetSoftwareLicense(v string) {
	o.SoftwareLicense = v
}

// GetDocumentationLicense returns the DocumentationLicense field value
func (o *Project) GetDocumentationLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentationLicense
}

// GetDocumentationLicenseOk returns a tuple with the DocumentationLicense field value
// and a boolean to check if the value has been set.
func (o *Project) GetDocumentationLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentationLicense, true
}

// SetDocumentationLicense sets field value
func (o *Project) SetDocumentationLicense(v string) {
	o.DocumentationLicense = v
}

// GetNoCommercialRestriction returns the NoCommercialRestriction field value
func (o *Project) GetNoCommercialRestriction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NoCommercialRestriction
}

// GetNoCommercialRestrictionOk returns a tuple with the NoCommercialRestriction field value
// and a boolean to check if the value has been set.
func (o *Project) GetNoCommercialRestrictionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoCommercialRestriction, true
}

// SetNoCommercialRestriction sets field value
func (o *Project) SetNoCommercialRestriction(v string) {
	o.NoCommercialRestriction = v
}

// GetExplanationNcr returns the ExplanationNcr field value
func (o *Project) GetExplanationNcr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationNcr
}

// GetExplanationNcrOk returns a tuple with the ExplanationNcr field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationNcrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationNcr, true
}

// SetExplanationNcr sets field value
func (o *Project) SetExplanationNcr(v string) {
	o.ExplanationNcr = v
}

// GetNoDocumentationRestriction returns the NoDocumentationRestriction field value
func (o *Project) GetNoDocumentationRestriction() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NoDocumentationRestriction
}

// GetNoDocumentationRestrictionOk returns a tuple with the NoDocumentationRestriction field value
// and a boolean to check if the value has been set.
func (o *Project) GetNoDocumentationRestrictionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoDocumentationRestriction, true
}

// SetNoDocumentationRestriction sets field value
func (o *Project) SetNoDocumentationRestriction(v bool) {
	o.NoDocumentationRestriction = v
}

// GetExplanationNdr returns the ExplanationNdr field value
func (o *Project) GetExplanationNdr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationNdr
}

// GetExplanationNdrOk returns a tuple with the ExplanationNdr field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationNdrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationNdr, true
}

// SetExplanationNdr sets field value
func (o *Project) SetExplanationNdr(v string) {
	o.ExplanationNdr = v
}

// GetOpenHardwareComponents returns the OpenHardwareComponents field value
func (o *Project) GetOpenHardwareComponents() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OpenHardwareComponents
}

// GetOpenHardwareComponentsOk returns a tuple with the OpenHardwareComponents field value
// and a boolean to check if the value has been set.
func (o *Project) GetOpenHardwareComponentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenHardwareComponents, true
}

// SetOpenHardwareComponents sets field value
func (o *Project) SetOpenHardwareComponents(v bool) {
	o.OpenHardwareComponents = v
}

// GetExplanationOhwc returns the ExplanationOhwc field value
func (o *Project) GetExplanationOhwc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationOhwc
}

// GetExplanationOhwcOk returns a tuple with the ExplanationOhwc field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationOhwcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationOhwc, true
}

// SetExplanationOhwc sets field value
func (o *Project) SetExplanationOhwc(v string) {
	o.ExplanationOhwc = v
}

// GetCreatorContribution returns the CreatorContribution field value
func (o *Project) GetCreatorContribution() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CreatorContribution
}

// GetCreatorContributionOk returns a tuple with the CreatorContribution field value
// and a boolean to check if the value has been set.
func (o *Project) GetCreatorContributionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorContribution, true
}

// SetCreatorContribution sets field value
func (o *Project) SetCreatorContribution(v bool) {
	o.CreatorContribution = v
}

// GetExplanationCcr returns the ExplanationCcr field value
func (o *Project) GetExplanationCcr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationCcr
}

// GetExplanationCcrOk returns a tuple with the ExplanationCcr field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationCcrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationCcr, true
}

// SetExplanationCcr sets field value
func (o *Project) SetExplanationCcr(v string) {
	o.ExplanationCcr = v
}

// GetNoUseRestriction returns the NoUseRestriction field value
func (o *Project) GetNoUseRestriction() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NoUseRestriction
}

// GetNoUseRestrictionOk returns a tuple with the NoUseRestriction field value
// and a boolean to check if the value has been set.
func (o *Project) GetNoUseRestrictionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoUseRestriction, true
}

// SetNoUseRestriction sets field value
func (o *Project) SetNoUseRestriction(v bool) {
	o.NoUseRestriction = v
}

// GetExplanationNur returns the ExplanationNur field value
func (o *Project) GetExplanationNur() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationNur
}

// GetExplanationNurOk returns a tuple with the ExplanationNur field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationNurOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationNur, true
}

// SetExplanationNur sets field value
func (o *Project) SetExplanationNur(v string) {
	o.ExplanationNur = v
}

// GetRedistributedWork returns the RedistributedWork field value
func (o *Project) GetRedistributedWork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RedistributedWork
}

// GetRedistributedWorkOk returns a tuple with the RedistributedWork field value
// and a boolean to check if the value has been set.
func (o *Project) GetRedistributedWorkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedistributedWork, true
}

// SetRedistributedWork sets field value
func (o *Project) SetRedistributedWork(v bool) {
	o.RedistributedWork = v
}

// GetExplanationRwr returns the ExplanationRwr field value
func (o *Project) GetExplanationRwr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationRwr
}

// GetExplanationRwrOk returns a tuple with the ExplanationRwr field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationRwrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationRwr, true
}

// SetExplanationRwr sets field value
func (o *Project) SetExplanationRwr(v string) {
	o.ExplanationRwr = v
}

// GetNoSpecificProduct returns the NoSpecificProduct field value
func (o *Project) GetNoSpecificProduct() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NoSpecificProduct
}

// GetNoSpecificProductOk returns a tuple with the NoSpecificProduct field value
// and a boolean to check if the value has been set.
func (o *Project) GetNoSpecificProductOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoSpecificProduct, true
}

// SetNoSpecificProduct sets field value
func (o *Project) SetNoSpecificProduct(v bool) {
	o.NoSpecificProduct = v
}

// GetExplanationNsp returns the ExplanationNsp field value
func (o *Project) GetExplanationNsp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationNsp
}

// GetExplanationNspOk returns a tuple with the ExplanationNsp field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationNspOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationNsp, true
}

// SetExplanationNsp sets field value
func (o *Project) SetExplanationNsp(v string) {
	o.ExplanationNsp = v
}

// GetNoComponentRestriction returns the NoComponentRestriction field value
func (o *Project) GetNoComponentRestriction() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NoComponentRestriction
}

// GetNoComponentRestrictionOk returns a tuple with the NoComponentRestriction field value
// and a boolean to check if the value has been set.
func (o *Project) GetNoComponentRestrictionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoComponentRestriction, true
}

// SetNoComponentRestriction sets field value
func (o *Project) SetNoComponentRestriction(v bool) {
	o.NoComponentRestriction = v
}

// GetExplanationNor returns the ExplanationNor field value
func (o *Project) GetExplanationNor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationNor
}

// GetExplanationNorOk returns a tuple with the ExplanationNor field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationNorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationNor, true
}

// SetExplanationNor sets field value
func (o *Project) SetExplanationNor(v string) {
	o.ExplanationNor = v
}

// GetTechnologyNeutral returns the TechnologyNeutral field value
func (o *Project) GetTechnologyNeutral() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TechnologyNeutral
}

// GetTechnologyNeutralOk returns a tuple with the TechnologyNeutral field value
// and a boolean to check if the value has been set.
func (o *Project) GetTechnologyNeutralOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TechnologyNeutral, true
}

// SetTechnologyNeutral sets field value
func (o *Project) SetTechnologyNeutral(v bool) {
	o.TechnologyNeutral = v
}

// GetExplanationTn returns the ExplanationTn field value
func (o *Project) GetExplanationTn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationTn
}

// GetExplanationTnOk returns a tuple with the ExplanationTn field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationTnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationTn, true
}

// SetExplanationTn sets field value
func (o *Project) SetExplanationTn(v string) {
	o.ExplanationTn = v
}

// GetCertificationMarkTerms returns the CertificationMarkTerms field value
func (o *Project) GetCertificationMarkTerms() ProjectCertificationMarkTerms {
	if o == nil {
		var ret ProjectCertificationMarkTerms
		return ret
	}

	return o.CertificationMarkTerms
}

// GetCertificationMarkTermsOk returns a tuple with the CertificationMarkTerms field value
// and a boolean to check if the value has been set.
func (o *Project) GetCertificationMarkTermsOk() (*ProjectCertificationMarkTerms, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificationMarkTerms, true
}

// SetCertificationMarkTerms sets field value
func (o *Project) SetCertificationMarkTerms(v ProjectCertificationMarkTerms) {
	o.CertificationMarkTerms = v
}

// GetExplanationCertificationTerms returns the ExplanationCertificationTerms field value
func (o *Project) GetExplanationCertificationTerms() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplanationCertificationTerms
}

// GetExplanationCertificationTermsOk returns a tuple with the ExplanationCertificationTerms field value
// and a boolean to check if the value has been set.
func (o *Project) GetExplanationCertificationTermsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplanationCertificationTerms, true
}

// SetExplanationCertificationTerms sets field value
func (o *Project) SetExplanationCertificationTerms(v string) {
	o.ExplanationCertificationTerms = v
}

// GetRelationship returns the Relationship field value
func (o *Project) GetRelationship() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value
// and a boolean to check if the value has been set.
func (o *Project) GetRelationshipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationship, true
}

// SetRelationship sets field value
func (o *Project) SetRelationship(v string) {
	o.Relationship = v
}

// GetAgreementTerms returns the AgreementTerms field value
func (o *Project) GetAgreementTerms() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AgreementTerms
}

// GetAgreementTermsOk returns a tuple with the AgreementTerms field value
// and a boolean to check if the value has been set.
func (o *Project) GetAgreementTermsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgreementTerms, true
}

// SetAgreementTerms sets field value
func (o *Project) SetAgreementTerms(v bool) {
	o.AgreementTerms = v
}

// GetParentName returns the ParentName field value
func (o *Project) GetParentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentName
}

// GetParentNameOk returns a tuple with the ParentName field value
// and a boolean to check if the value has been set.
func (o *Project) GetParentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentName, true
}

// SetParentName sets field value
func (o *Project) SetParentName(v string) {
	o.ParentName = v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responsiblePartyType"] = o.ResponsiblePartyType
	toSerialize["responsibleParty"] = o.ResponsibleParty
	toSerialize["bindingParty"] = o.BindingParty
	toSerialize["country"] = o.Country
	if !IsNil(o.StreetAddress1) {
		toSerialize["streetAddress1"] = o.StreetAddress1
	}
	if !IsNil(o.StreetAddress2) {
		toSerialize["streetAddress2"] = o.StreetAddress2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	if !IsNil(o.PrivateContact) {
		toSerialize["privateContact"] = o.PrivateContact
	}
	if !IsNil(o.PublicContact) {
		toSerialize["publicContact"] = o.PublicContact
	}
	toSerialize["projectName"] = o.ProjectName
	if !IsNil(o.ProjectWebsite) {
		toSerialize["projectWebsite"] = o.ProjectWebsite
	}
	if !IsNil(o.ProjectVersion) {
		toSerialize["projectVersion"] = o.ProjectVersion
	}
	if !IsNil(o.PreviousVersions) {
		toSerialize["previousVersions"] = o.PreviousVersions
	}
	if !IsNil(o.ProjectDescription) {
		toSerialize["projectDescription"] = o.ProjectDescription
	}
	toSerialize["primaryType"] = o.PrimaryType
	if !IsNil(o.AdditionalType) {
		toSerialize["additionalType"] = o.AdditionalType
	}
	if !IsNil(o.ProjectKeywords) {
		toSerialize["projectKeywords"] = o.ProjectKeywords
	}
	if !IsNil(o.Citations) {
		toSerialize["citations"] = o.Citations
	}
	if !IsNil(o.DocumentationUrl) {
		toSerialize["documentationUrl"] = o.DocumentationUrl
	}
	if !IsNil(o.AvailableFileFormat) {
		toSerialize["availableFileFormat"] = o.AvailableFileFormat
	}
	toSerialize["hardwareLicense"] = o.HardwareLicense
	toSerialize["softwareLicense"] = o.SoftwareLicense
	toSerialize["documentationLicense"] = o.DocumentationLicense
	toSerialize["noCommercialRestriction"] = o.NoCommercialRestriction
	toSerialize["explanationNcr"] = o.ExplanationNcr
	toSerialize["noDocumentationRestriction"] = o.NoDocumentationRestriction
	toSerialize["explanationNdr"] = o.ExplanationNdr
	toSerialize["openHardwareComponents"] = o.OpenHardwareComponents
	toSerialize["explanationOhwc"] = o.ExplanationOhwc
	toSerialize["creatorContribution"] = o.CreatorContribution
	toSerialize["explanationCcr"] = o.ExplanationCcr
	toSerialize["noUseRestriction"] = o.NoUseRestriction
	toSerialize["explanationNur"] = o.ExplanationNur
	toSerialize["redistributedWork"] = o.RedistributedWork
	toSerialize["explanationRwr"] = o.ExplanationRwr
	toSerialize["noSpecificProduct"] = o.NoSpecificProduct
	toSerialize["explanationNsp"] = o.ExplanationNsp
	toSerialize["noComponentRestriction"] = o.NoComponentRestriction
	toSerialize["explanationNor"] = o.ExplanationNor
	toSerialize["technologyNeutral"] = o.TechnologyNeutral
	toSerialize["explanationTn"] = o.ExplanationTn
	toSerialize["certificationMarkTerms"] = o.CertificationMarkTerms
	toSerialize["explanationCertificationTerms"] = o.ExplanationCertificationTerms
	toSerialize["relationship"] = o.Relationship
	toSerialize["agreementTerms"] = o.AgreementTerms
	toSerialize["parentName"] = o.ParentName
	return toSerialize, nil
}

func (o *Project) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responsiblePartyType",
		"responsibleParty",
		"bindingParty",
		"country",
		"projectName",
		"primaryType",
		"hardwareLicense",
		"softwareLicense",
		"documentationLicense",
		"noCommercialRestriction",
		"explanationNcr",
		"noDocumentationRestriction",
		"explanationNdr",
		"openHardwareComponents",
		"explanationOhwc",
		"creatorContribution",
		"explanationCcr",
		"noUseRestriction",
		"explanationNur",
		"redistributedWork",
		"explanationRwr",
		"noSpecificProduct",
		"explanationNsp",
		"noComponentRestriction",
		"explanationNor",
		"technologyNeutral",
		"explanationTn",
		"certificationMarkTerms",
		"explanationCertificationTerms",
		"relationship",
		"agreementTerms",
		"parentName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProject := _Project{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProject)

	if err != nil {
		return err
	}

	*o = Project(varProject)

	return err
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



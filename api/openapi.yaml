openapi: 3.0.0
info:
  contact:
    email: ""
    name: ""
    url: ""
  description: "# Introduction\n\nWelcome to the OSHWA Open Source Hardware Certification\
    \ API. We hope that you will use it to build on top of the OSHWA certification\
    \ program. This documentation provides information on how to use the OSHWA REST\
    \ API to view, create, and search OSHWA certified open source hardware projects.\
    \ You can learn more about OSHWA [here](https://www.oshwa.org/about/) and more\
    \ about OSHWA’s free open source hardware certification program [here](https://certification.oshwa.org/).\n\
    \nThis API supports both read and write functions. You can use the read functions\
    \ to pull information about certified hardware from the [directory](https://certification.oshwa.org/list.html)\
    \ in order to explore and present it in new ways. We encourage you to use it to\
    \ find new ways to understand and visualize the world of open source hardware!\n\
    \nYou can use the write functions to make it easier to submit registration applications\
    \ to the program. Originally, the only way to submit hardware for registration\
    \ was through OSHWA’s [application form](https://application.oshwa.org/apply).\
    \ We hope that the write functionality will make it easier to integrate certification\
    \ applications into existing workflows, and to connect platforms that already\
    \ host open source hardware to the certification program.  \n\nIf you have questions\
    \ or comments about the API, please email us at info@oshwa.org.  We would also\
    \ love to know how you use the API! We encourage you to contact us at info@oshwa.org,\
    \ or let us know on twitter at @OHSummit.\n\n# Tools\nThis API is documented in\
    \ **OpenAPI format**. It is built with [Swagger](http://swagger.io) and [ReDoc](https://github.com/Redocly/redoc).\n\
    \n# Using the API\nIn order to use the API, you must register for an API key.\
    \ You can get your own API key [here](https://certificationapi.oshwa.org/). If\
    \ your token is not included or is invalid, the API will return an error. If you'd\
    \ like to test the endpoints, check out our [Swagger](/endpoints) implementation,\
    \ where you will be able to request a key, add the key to your requests, and explore\
    \ OSHWA certified projects. You will also find code examples in this documentation.\n\
    \n# Pagination\nProject and Company results are returned in a wrapper object that\
    \ contains total, limit, and offset values, which are useful for paginating over\
    \ results. \n\n```\n{\n  \"total\": 200, // Total number of matching items\n \
    \ \"offset\": 0, // Number of items skipped in request\n  \"limit\": 100, // Max\
    \ number of items in request\n  \"items\": [ {...} ] // List of items\n}\n```\n\
    \nThe default `limit` for requests is 100, and the maximum `limit` is 1000. The\
    \ default `offset` is 0. The above request returns the first 100 items. To get\
    \ the next 100 items, the `offset` would be changed to 100. These parameters can\
    \ be used to loop through the api and retrieve all items.\n\nAll items are returned\
    \ in alphabetical order by `projectName`. \n\n# Authentication\n\nAll OSHWA API\
    \ endpoints require Bearer Token Authentication.  You can get an API key [here](https://certificationapi.oshwa.org/).\n\
    \n# Errors\n\nThe OSHWA API uses HTTP response status codes to indicate whether\
    \ the response was successful. Detailed information about the response and how\
    \ any errors might be resolved can be found in the body of the error message.\n\
    \n```\n{\n    \"error\": {\n        \"statusCode\": 422,\n        \"errorCode\"\
    : \"Unprocessable Entity\",\n        \"message\": \"Validation Error: Input validation\
    \ failed\",\n        \"details\": [\n            {\n                \"msg\": \"\
    Responsible Party Type is required\",\n                \"param\": \"responsiblePartyType\"\
    ,\n                \"location\": \"body\"\n            },\n        ]\n    }\n\
    }\n```\n"
  license:
    name: Creative Commons Attribution-ShareAlike 4.0 International License
    url: https://creativecommons.org/licenses/by-sa/4.0/legalcode
  title: OSHWA API
  version: 1.0.0
  x-logo:
    url: https://certificationapi.oshwa.org/images/api-image.jpg
    backgroundColor: '#000000'
    altText: OSHWA
servers:
- url: https://certificationapi.oshwa.org/
tags:
- description: User registration and authorization token request
  name: User
- description: "You can use these project endpoints to access information about all\
    \ of the certified hardware listed in the [certification directory](https://certification.oshwa.org/list.html).\
    \ They are designed to make it easy to explore certified hardware in a number\
    \ of different ways.  \n\nThere are example code snippets in a number of different\
    \ languages to help you understand how to use them. Just make sure to replace\
    \ `<Token>` with your API key.  You can get your own API key [here](https://certificationapi.oshwa.org/).\
    \ You can also test code in our Swagger sandbox [here](https://certificationapi.oshwa.org/endpoints/#/Project).\n"
  name: Project
- description: "You can use these company endpoints to access information about how\
    \ different companies have used the certification program, and what types of hardware\
    \ they have certified.  \n\nThere are example code snippets in a number of different\
    \ languages to help you understand how to use them. Just make sure to replace\
    \ `<Token>` with your API key. You can get your own API key [here](https://certificationapi.oshwa.org/).\
    \ You can also test code in our Swagger sandbox [here](https://certificationapi.oshwa.org/endpoints/#/Company).\n"
  name: Company
- description: Get a list of valid options for project properties
  name: Options
paths:
  /users/signup:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_users_signup_post_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_users_signup_post_201_response'
          description: User registration successful and API token created
        "422":
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  errorCode: Unprocessable Entity
                  message: Validation error
                  details: "The type of \\n\"value\\n\" is incorrect, expected type:\
                    \ Boolean"
                  path:
                  - fields
                  - noUseRestriction
                  - en-US
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Invalid fields
      summary: Register as user and receive an api token to authorize API requests.
      tags:
      - User
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST 'https://certificationapi.oshwa.org/users/signup' \
          --header 'Content-Type: application/json' \
          --data-raw '{
             "firstName": "<firstName>",
             "lastName": "<lastName>",
             "email": "<email>"
          }'
      - lang: JavaScript
        source: |
          var data = JSON.stringify({"firstName":"<firstName>","lastName":"<lastName>","email":"<email>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
              console.log(this.responseText);
            }
          });

          xhr.open("POST", "https://certificationapi.oshwa.org/users/signup");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: NodeJs
        source: |
          var http = require('follow-redirects').http;

          var options = {
            'method': 'POST',
            'hostname': 'certificationapi.oshwa.org',
            'path': '/users/signup',
            'headers': {
              'Content-Type': 'application/json'
             },
            'maxRedirects': 20
          };

          var req = http.request(options, function (res) {
            var chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function (chunk) {
              var body = Buffer.concat(chunks);
              console.log(body.toString());
            });

            res.on("error", function (error) {
              console.error(error);
            });
          });

          var postData = JSON.stringify({"firstName":"<firstName>","lastName":"<lastName>","email":"<email>"});

          req.write(postData);

          req.end();
      - lang: Python
        source: |
          import requests

          url = "https://certificationapi.oshwa.org/users/signup"

          payload = "{\"firstName\": \"Jane\",\"lastName\": \"Doe\",\"email\": \"jane@example.com\"}"
          headers = {
              'Content-Type': 'application/json',
          }
          response = requests.request("POST", url, headers=headers, data=payload)

          print(response.text.encode('utf8'))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("https://certificationapi.oshwa.org/users/signup")

          https = Net::HTTP.new(url.host, url.port);
          https.use_ssl = true
          request = Net::HTTP::Post.new(url)
          request["Content-Type"] = "application/json"
          request.body = "{\n    \"firstName\": \"<firstName>\",\n    \"lastName\": \"<lastName>\",\n    \"email\": \"<email>\"\n}"
          response = https.request(request)
          puts response.read_body
  /api/projects:
    get:
      parameters:
      - description: Full text search across project text fields
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: "Returns matches in primaryType, additionalType, or projectKeywords.\
          \ Multiple types can be searched with comma-separated values, i.e. `arts,education,electronics`"
        explode: true
        in: query
        name: types
        required: false
        schema:
          type: string
        style: form
      - description: OSHWA UID
        explode: true
        in: query
        name: oshwaUid
        required: false
        schema:
          type: string
        style: form
      - description: Project Name
        explode: true
        in: query
        name: projectName
        required: false
        schema:
          type: string
        style: form
      - description: Country
        explode: true
        in: query
        name: country
        required: false
        schema:
          type: string
        style: form
      - description: Primary Type
        explode: true
        in: query
        name: primaryType
        required: false
        schema:
          type: string
        style: form
      - description: Additional Type
        explode: true
        in: query
        name: additionalType
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Project Keywords
        explode: true
        in: query
        name: projectKeywords
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Hardware License
        explode: true
        in: query
        name: hardwareLicense
        required: false
        schema:
          type: string
        style: form
      - description: Software License
        explode: true
        in: query
        name: softWare License
        required: false
        schema:
          type: string
        style: form
      - description: Documentation License
        explode: true
        in: query
        name: documentationLicense
        required: false
        schema:
          type: string
        style: form
      - description: "The number of items to return. Default is 100, maximum is 1000"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The number of records to skip when retrieving results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProjects'
          description: OK
        "401":
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  errorCode: Access Token Invalid
                  message: Please provide a valid access token. You can request a
                    token at http://localhost:5000/users/signup
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Required access token is missing or invalid
      security:
      - bearerAuth: []
      summary: Get all OSHWA certified projects
      tags:
      - Project
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET 'https://certificationapi.oshwa.org/api/projects' \
          --header 'Authorization: Bearer <Token>'
      - lang: JavaScript
        source: |
          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
              console.log(this.responseText);
            }
          });

          xhr.open("GET", "https://certificationapi.oshwa.org/api/projects");
          xhr.setRequestHeader("Authorization", "Bearer <Token>");

          xhr.send();
      - lang: NodeJs
        source: |
          var http = require('follow-redirects').http;

          var options = {
            'method': 'GET',
            'hostname': 'certificationapi.oshwa.org',
            'path': '/api/projects',
            'headers': {
              'Authorization': 'Bearer <Token>'
             },
            'maxRedirects': 20
          };

          var req = http.request(options, function (res) {
            var chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function (chunk) {
              var body = Buffer.concat(chunks);
              console.log(body.toString());
            });

            res.on("error", function (error) {
              console.error(error);
            });
          });

          req.end();
      - lang: Python
        source: |
          import requests

          url = "https://certificationapi.oshwa.org/api/projects"

          payload = {}
          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer <Token>'
          }

          response = requests.request("GET", url, headers=headers, data=payload)

          print(response.text.encode('utf8'))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("https://certificationapi.oshwa.org/api/projects")

          https = Net::HTTP.new(url.host, url.port);
          https.use_ssl = true

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = "Bearer <Token>"

          response = https.request(request)
          puts response.read_body
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_projects_post_200_response'
          description: OK
        "401":
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  errorCode: Access Token Invalid
                  message: Please provide a valid access token. You can request a
                    token at http://localhost:5000/users/signup
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Required access token is missing or invalid
        "422":
          content:
            application/json:
              example:
                error:
                  statusCode: 422
                  errorCode: Unprocessable Entity
                  message: Validation error
                  details: "The type of \\n\"value\\n\" is incorrect, expected type:\
                    \ Boolean"
                  path:
                  - fields
                  - noUseRestriction
                  - en-US
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Invalid fields
      security:
      - bearerAuth: []
      summary: Create a project for OSHWA certification
      tags:
      - Project
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request POST 'https://certificationapi.oshwa.org/api/projects/' \
          --header 'Authorization: Bearer <Token>' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "responsiblePartyType": "Individual",
              "responsibleParty": "Company Name",
              "bindingParty": "Jane Doe",
              "country": "United States of America",
              "streetAddress1": "255 Pouros Circle",
              "streetAddress2": "Suite 123",
              "city": "Raleigh",
              "state": "NC",
              "postalCode": "27616",
              "privateContact": "jane@example.com",
              "publicContact": "jane.doe@example.com",
              "projectName": "My Open Source Project",
              "projectWebsite": "https://www.example.com",
              "projectVersion": "1.0",
              "previousVersions": ["US000000"],
              "projectDescription": "Lorem ipsum dolor sit amet.",
              "primaryType": "Electronics",
              "additionalType": [
                  "3D Printing"
              ],
              "projectKeywords": [
                  "3D Printing",
                  "electronics"
              ],
              "citations": [
                  {
                      "title": "First Citation",
                      "url": "https://www.example.com"
                  }
              ],
              "documentationUrl": "https://www.example.com",
              "availableFileFormat": false,
              "hardwareLicense": "CERN",
              "softwareLicense": "Apache",
              "documentationLicense": "CC 0",
              "noCommercialRestriction": false,
              "explanationNcr": "Lorem ipsum dolor sit amet.",
              "noDocumentationRestriction": false,
              "explanationNdr": "Lorem ipsum dolor sit amet.",
              "openHardwareComponents": "false",
              "explanationOhwc": "Lorem ipsum dolor sit amet.",
              "creatorContribution": false,
              "explanationCcr": "Lorem ipsum dolor sit amet.",
              "noUseRestriction": false,
              "explanationNur": "Lorem ipsum dolor sit amet.",
              "redistributedWork": false,
              "explanationRwr": "Lorem ipsum dolor sit amet.",
              "noSpecificProduct": "false",
              "explanationNsp": "Lorem ipsum dolor sit amet.",
              "noComponentRestriction": false,
              "explanationNor": "Lorem ipsum dolor sit amet.",
              "technologyNeutral": false,
              "explanationTn": "Lorem ipsum dolor sit amet.",
              "certificationMarkTerms": {
                  "accurateContactInformation": {
                      "term": "I have provided OSHWA with accurate contact information, recognize that all official communications from OSHWA will be directed to that contact information, and will update that contact information as necessary.",
                      "agreement": true
                  }
              },
              "explanationCertificationTerms": "Lorem ipsum dolor sit amet.",
              "relationship": "self",
              "agreementTerms": true,
              "parentName": "J Doe"
          }'
      - lang: JavaScript
        source: |
          var data = JSON.stringify({"responsiblePartyType":"Individual","responsibleParty":"Company Name","bindingParty":"Jane Doe","country":"United States of America","streetAddress1":"255 Pouros Circle","streetAddress2":"Suite 123","city":"Raleigh","state":"NC","postalCode":"27616","privateContact":"jane@example.com","publicContact":"jane.doe@example.com","projectName":"My Open Source Project","projectWebsite":"https://www.example.com","projectVersion":"1.0","previousVersions":["US000236"],"projectDescription":"Lorem ipsum dolor sit amet.","primaryType":"Electronics","additionalType":["3D Printing"],"projectKeywords":["3D Printing","electronics"],"citations":[{"title":"First Citation","url":"https://www.example.com"}],"documentationUrl":"https://www.example.com","availableFileFormat":false,"hardwareLicense":"CERN","softwareLicense":"Apache","documentationLicense":"CC 0","noCommercialRestriction":false,"explanationNcr":"Lorem ipsum dolor sit amet.","noDocumentationRestriction":false,"explanationNdr":"Lorem ipsum dolor sit amet.","openHardwareComponents":"false","explanationOhwc":"Lorem ipsum dolor sit amet.","creatorContribution":false,"explanationCcr":"Lorem ipsum dolor sit amet.","noUseRestriction":false,"explanationNur":"Lorem ipsum dolor sit amet.","redistributedWork":false,"explanationRwr":"Lorem ipsum dolor sit amet.","noSpecificProduct":"false","explanationNsp":"Lorem ipsum dolor sit amet.","noComponentRestriction":false,"explanationNor":"Lorem ipsum dolor sit amet.","technologyNeutral":false,"explanationTn":"Lorem ipsum dolor sit amet.","certificationMarkTerms":{"accurateContactInformation":{"term":"I have provided OSHWA with accurate contact information, recognize that all official communications from OSHWA will be directed to that contact information, and will update that contact information as necessary.","agreement":true}},"explanationCertificationTerms":"Lorem ipsum dolor sit amet.","relationship":"self","agreementTerms":true,"parentName":"J Doe"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
              console.log(this.responseText);
            }
          });

          xhr.open("POST", "https://certificationapi.oshwa.org/api/projects/");
          xhr.setRequestHeader("Authorization", "Bearer <Token>");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: NodeJs
        source: |
          var http = require('follow-redirects').http;

          var options = {
            'method': 'POST',
            'hostname': 'certificationapi.oshwa.org',
            'path': '/api/projects/',
            'headers': {
              'Authorization': 'Bearer <Token>',
              'Content-Type': 'application/json'
            },
            'maxRedirects': 20
          };

          var req = http.request(options, function (res) {
            var chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function (chunk) {
              var body = Buffer.concat(chunks);
              console.log(body.toString());
            });

            res.on("error", function (error) {
              console.error(error);
            });
          });

          var postData = JSON.stringify({"responsiblePartyType":"Individual","responsibleParty":"Company Name","bindingParty":"Jane Doe","country":"United States of America","streetAddress1":"255 Pouros Circle","streetAddress2":"Suite 123","city":"Raleigh","state":"NC","postalCode":"27616","privateContact":"jane@example.com","publicContact":"jane.doe@example.com","projectName":"My Op","projectWebsite":"https://www.example.com","projectVersion":"1.0","previousVersions":["US000236"],"projectDescription":"Lorem ipsum dolor sit amet.","primaryType":"Electronics","additionalType":["3D Printing"],"projectKeywords":["3D Printing","electronics"],"citations":[{"title":"First Citation","url":"https://www.example.com"}],"documentationUrl":"https://www.example.com","availableFileFormat":false,"hardwareLicense":"CERN","softwareLicense":"Apache","documentationLicense":"CC 0","noCommercialRestriction":false,"explanationNcr":"Lorem ipsum dolor sit amet.","noDocumentationRestriction":false,"explanationNdr":"Lorem ipsum dolor sit amet.","openHardwareComponents":"false","explanationOhwc":"Lorem ipsum dolor sit amet.","creatorContribution":false,"explanationCcr":"Lorem ipsum dolor sit amet.","noUseRestriction":false,"explanationNur":"Lorem ipsum dolor sit amet.","redistributedWork":false,"explanationRwr":"Lorem ipsum dolor sit amet.","noSpecificProduct":"false","explanationNsp":"Lorem ipsum dolor sit amet.","noComponentRestriction":false,"explanationNor":"Lorem ipsum dolor sit amet.","technologyNeutral":false,"explanationTn":"Lorem ipsum dolor sit amet.","certificationMarkTerms":{"accurateContactInformation":{"term":"I have provided OSHWA with accurate contact information, recognize that all official communications from OSHWA will be directed to that contact information, and will update that contact information as necessary.","agreement":true}},"explanationCertificationTerms":"Lorem ipsum dolor sit amet.","relationship":"self","agreementTerms":true,"parentName":"J Doe"});

          req.write(postData);

          req.end();
      - lang: Python
        source: |
          import requests

          url = "https://certificationapi.oshwa.org/api/projects"

          payload = "{\"responsiblePartyType\": \"Individual\",\"responsibleParty\": \"Company Name\",\"bindingParty\": \"Jane Doe\",\"country\": \"United States of America\",\"streetAddress1\": \"255 Pouros Circle\",\"streetAddress2\": \"Suite 123\",\"city\": \"Raleigh\",\"state\": \"NC\",\"postalCode\": \"27616\",\"privateContact\": \"jane@example.com\",\"publicContact\": \"jane.doe@example.com\",\"projectName\": \"My Open Source Project\",\"projectWebsite\": \"https://www.example.com\",\"projectVersion\": \"1.0\",\"previousVersions\": [    \"US000236\"],\"projectDescription\": \"Lorem ipsum dolor sit amet.\",\"primaryType\": \"Electronics\",\"additionalType\": [    \"3D Printing\"],\"projectKeywords\": [    \"3D Printing\",    \"electronics\"],\"citations\": [    {        \"title\": \"First Citation\",        \"url\": \"https://www.example.com\"    }],\"documentationUrl\": \"https://www.example.com\",\"availableFileFormat\": false,\"hardwareLicense\": \"CERN\",\"softwareLicense\": \"Apache\",\"documentationLicense\": \"CC 0\",\"noCommercialRestriction\": false,\"explanationNcr\": \"Lorem ipsum dolor sit amet.\",\"noDocumentationRestriction\": false,\"explanationNdr\": \"Lorem ipsum dolor sit amet.\",\"openHardwareComponents\": \"false\",\"explanationOhwc\": \"Lorem ipsum dolor sit amet.\",\"creatorContribution\": false,\"explanationCcr\": \"Lorem ipsum dolor sit amet.\",\"noUseRestriction\": false,\"explanationNur\": \"Lorem ipsum dolor sit amet.\",\"redistributedWork\": false,\"explanationRwr\": \"Lorem ipsum dolor sit amet.\",\"noSpecificProduct\": \"false\",\"explanationNsp\": \"Lorem ipsum dolor sit amet.\",\"noComponentRestriction\": false,\"explanationNor\": \"Lorem ipsum dolor sit amet.\",\"technologyNeutral\": false,\"explanationTn\": \"Lorem ipsum dolor sit amet.\",\"certificationMarkTerms\": {    \"accurateContactInformation\": {        \"term\": \"I have provided OSHWA with accurate contact information, recognize that all official communications from OSHWA will be directed to that contact information, and will update that contact information as necessary.\",        \"agreement\": true    }},\"explanationCertificationTerms\": \"Lorem ipsum dolor sit amet.\",\"relationship\": \"self\",\"agreementTerms\": true,\"parentName\": \"J Doe\"}"
          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer <Token>'
          }

          response = requests.request("POST", url, headers=headers, data=payload)

          print(response.text.encode('utf8'))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("https://certificationapi.oshwa.org/api/projects/")

          https = Net::HTTP.new(url.host, url.port);
          https.use_ssl = true
          request = Net::HTTP::Post.new(url)
          request["Authorization"] = "Bearer <Token>"
          request["Content-Type"] = "application/json"
          request.body = "{\n    \"responsiblePartyType\": \"Individual\",\n    \"responsibleParty\": \"Company Name\",\n    \"bindingParty\": \"Jane Doe\",\n    \"country\": \"United States of America\",\n    \"streetAddress1\": \"255 Pouros Circle\",\n    \"streetAddress2\": \"Suite 123\",\n    \"city\": \"Raleigh\",\n    \"state\": \"NC\",\n    \"postalCode\": \"27616\",\n    \"privateContact\": \"jane@example.com\",\n    \"publicContact\": \"jane.doe@example.com\",\n    \"projectName\": \"My Op\",\n    \"projectWebsite\": \"https://www.example.com\",\n    \"projectVersion\": \"1.0\",\n    \"previousVersions\": [\"US000236\"],\n    \"projectDescription\": \"Lorem ipsum dolor sit amet.\",\n    \"primaryType\": \"Electronics\",\n    \"additionalType\": [\n        \"3D Printing\"\n    ],\n    \"projectKeywords\": [\n        \"3D Printing\",\n        \"electronics\"\n    ],\n    \"citations\": [\n        {\n            \"title\": \"First Citation\",\n            \"url\": \"https://www.example.com\"\n        }\n    ],\n    \"documentationUrl\": \"https://www.example.com\",\n    \"availableFileFormat\": false,\n    \"hardwareLicense\": \"CERN\",\n    \"softwareLicense\": \"Apache\",\n    \"documentationLicense\": \"CC 0\",\n    \"noCommercialRestriction\": false,\n    \"explanationNcr\": \"Lorem ipsum dolor sit amet.\",\n    \"noDocumentationRestriction\": false,\n    \"explanationNdr\": \"Lorem ipsum dolor sit amet.\",\n    \"openHardwareComponents\": \"false\",\n    \"explanationOhwc\": \"Lorem ipsum dolor sit amet.\",\n    \"creatorContribution\": false,\n    \"explanationCcr\": \"Lorem ipsum dolor sit amet.\",\n    \"noUseRestriction\": false,\n    \"explanationNur\": \"Lorem ipsum dolor sit amet.\",\n    \"redistributedWork\": false,\n    \"explanationRwr\": \"Lorem ipsum dolor sit amet.\",\n    \"noSpecificProduct\": \"false\",\n    \"explanationNsp\": \"Lorem ipsum dolor sit amet.\",\n    \"noComponentRestriction\": false,\n    \"explanationNor\": \"Lorem ipsum dolor sit amet.\",\n    \"technologyNeutral\": false,\n    \"explanationTn\": \"Lorem ipsum dolor sit amet.\",\n    \"certificationMarkTerms\": {\n        \"accurateContactInformation\": {\n            \"term\": \"I have provided OSHWA with accurate contact information, recognize that all official communications from OSHWA will be directed to that contact information, and will update that contact information as necessary.\",\n            \"agreement\": true\n        }\n    },\n    \"explanationCertificationTerms\": \"Lorem ipsum dolor sit amet.\",\n    \"relationship\": \"self\",\n    \"agreementTerms\": true,\n    \"parentName\": \"J Doe\"\n}"

          response = https.request(request)
          puts response.read_body
  /api/projects/{id}:
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: Project id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProject'
          description: "OK. If there are no results, an empty array is returned."
        "401":
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  errorCode: Access Token Invalid
                  message: Please provide a valid access token. You can request a
                    token at http://localhost:5000/users/signup
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Required access token is missing or invalid
      security:
      - bearerAuth: []
      summary: Get an OSHWA certified project by ID.
      tags:
      - Project
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET 'https://certificationapi.oshwa.org/api/projects/<id>' \
          --header 'Authorization: Bearer <Token>'
      - lang: JavaScript
        source: |
          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
              console.log(this.responseText);
            }
          });

          xhr.open("GET", "https://certificationapi.oshwa.org/api/projects/<id>");
          xhr.setRequestHeader("Authorization", "Bearer <Token>");

          xhr.send();
      - lang: NodeJs
        source: |
          var http = require('follow-redirects').http;

          var options = {
            'method': 'GET',
            'hostname': 'certificationapi.oshwa.org',
            'path': '/api/projects/<id>',
            'headers': {
              'Authorization': 'Bearer <Token>'
             },
            'maxRedirects': 20
          };

          var req = http.request(options, function (res) {
            var chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function (chunk) {
              var body = Buffer.concat(chunks);
              console.log(body.toString());
            });

            res.on("error", function (error) {
              console.error(error);
            });
          });

          req.end();
      - lang: Python
        source: |
          import requests

          url = "https://certificationapi.oshwa.org/api/projects/<id>"

          payload  = {}
          headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer <Token>'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("https://certificationapi.oshwa.org/api/projects/<id>")

          https = Net::HTTP.new(url.host, url.port);
          https.use_ssl = true

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = "Bearer <Token>"

          response = https.request(request)
          puts response.read_body
  /api/companies/{name}:
    get:
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          description: Company name
          type: string
        style: simple
      - description: "The number of items to return. Default is 100, maximum is 1000"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The number of records to skip when retrieving results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProjects'
          description: "OK. If there are no results, an empty array is returned."
        "401":
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  errorCode: Access Token Invalid
                  message: Please provide a valid access token. You can request a
                    token at http://localhost:5000/users/signup
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Required access token is missing or invalid
      security:
      - bearerAuth: []
      summary: Search by company name
      tags:
      - Company
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET 'https://certificationapi.oshwa.org/api/companies/<name>' \
          --header 'Authorization: Bearer <Token>'
      - lang: JavaScript
        source: |
          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
              console.log(this.responseText);
            }
          });

          xhr.open("GET", "https://certificationapi.oshwa.org/api/companies/<name>");
          xhr.setRequestHeader("Authorization", "Bearer <Token>");

          xhr.send();
      - lang: NodeJs
        source: |
          var http = require('follow-redirects').http;

          var options = {
            'method': 'GET',
            'hostname': 'certificationapi.oshwa.org',
            'path': '/api/companies/<name>',
            'headers': {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer <Token>'
             },
            'maxRedirects': 20
          };

          var req = http.request(options, function (res) {
            var chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function (chunk) {
              var body = Buffer.concat(chunks);
              console.log(body.toString());
            });

            res.on("error", function (error) {
              console.error(error);
            });
          });

          req.end();
      - lang: Python
        source: |
          import requests

          url = "https://certificationapi.oshwa.org/api/companies/<name>"

          payload  = {}
          headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer <Token>'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("https://certificationapi.oshwa.org/api/companies/<name>")

          https = Net::HTTP.new(url.host, url.port);
          https.use_ssl = true
          request = Net::HTTP::Get.new(url)
          request["Content-Type"] = "application/json"
          request["Authorization"] = "Bearer <Token>"

          response = https.request(request)
          puts response.read_body
  /api/options:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_options_get_200_response'
        "401":
          content:
            application/json:
              example:
                error:
                  statusCode: 401
                  errorCode: Access Token Invalid
                  message: Please provide a valid access token. You can request a
                    token at http://localhost:5000/users/signup
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Required access token is missing or invalid
      security:
      - bearerAuth: []
      summary: "Get a list of valid project values for country, responsibleParty,\
        \ primaryType, additionalType, hardwareLicense,softwareLicense, and documentationLicense\
        \ fields."
      tags:
      - Options
      x-code-samples:
      - lang: cURL
        source: |
          curl --location --request GET 'https://certificationapi.oshwa.org/api/options' \
          --header 'Authorization: Bearer <Token>'
      - lang: JavaScript
        source: |
          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
              console.log(this.responseText);
            }
          });

          xhr.open("GET", "https://certificationapi.oshwa.org/api/options");
          xhr.setRequestHeader("Authorization", "Bearer <Token>");

          xhr.send();
      - lang: NodeJs
        source: "var http = require('follow-redirects').http;\n\nvar options = {\n\
          \  'method': 'GET',\n  'hostname': 'certificationapi.oshwa.org',\n  'path':\
          \ '/api/options',\n  'headers': {\n    'Authorization': 'Bearer <Token>'\n\
          \   },\n  'maxRedirects': 20\n};\n\nvar req = http.request(options, function\
          \ (res) {\n  var chunks = [];\n    \n  res.on(\"data\", function (chunk)\
          \ {\n    chunks.push(chunk);\n  });\n  \n  res.on(\"end\", function (chunk)\
          \ {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n\
          \  });\n  \n  res.on(\"error\", function (error) {\n    console.error(error);\n\
          \  });\n});\n\nreq.end();\n"
      - lang: Python
        source: |
          import requests

          url = "https://certificationapi.oshwa.org/api/options"

          payload  = {}
          headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer <Token>'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("https://certificationapi.oshwa.org/api/options")

          https = Net::HTTP.new(url.host, url.port);
          https.use_ssl = true
          request = Net::HTTP::Get.new(url)
          request["Content-Type"] = "application/json"
          request["Authorization"] = "Bearer <Token>"

          response = https.request(request)
          puts response.read_body
components:
  responses:
    NotFound:
      content:
        application/json:
          example:
            error:
              statusCode: 404
              errorCode: Not Found
          schema:
            $ref: '#/components/schemas/ApiError'
      description: The requested resource was not found
    AccessTokenInvalid:
      content:
        application/json:
          example:
            error:
              statusCode: 401
              errorCode: Access Token Invalid
              message: Please provide a valid access token. You can request a token
                at http://localhost:5000/users/signup
          schema:
            $ref: '#/components/schemas/ApiError'
      description: Required access token is missing or invalid
    DataValidationError:
      content:
        application/json:
          example:
            error:
              statusCode: 422
              errorCode: Unprocessable Entity
              message: Validation error
              details: "The type of \\n\"value\\n\" is incorrect, expected type: Boolean"
              path:
              - fields
              - noUseRestriction
              - en-US
          schema:
            $ref: '#/components/schemas/ApiError'
      description: Invalid fields
  schemas:
    User:
      example:
        firstName: Jane
        lastName: Doe
        email: jane@example.com
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          description: "Email for the user, needs to be unique."
          format: email
          type: string
      required:
      - email
      - firstName
      - lastName
      type: object
    Project:
      example:
        responsiblePartyType: Individual
        responsibleParty: Company Name
        bindingParty: Jane Doe
        country: United States of America
        streetAddress1: 255 Pouros Circle
        streetAddress2: Suite 123
        city: Raleigh
        state: North Carolina
        postalCode: 27616
        privateContact: jane@example.com
        publicContact: jane.doe@example.com
        projectName: My Open Source Project
        projectWebsite: https://example.com
        projectVersion: 1
        previousVersions:
        - US000000
        projectDescription: Open source project description
        primaryType: Electronics
        additionalType:
        - 3D Printing
        projectKeywords:
        - electronics
        citations:
        - url: https://example.com
          title: My first citation
        documentationUrl: https://example.com
        availableFileFormat: true
        hardwareLicense: Other
        softwareLicense: No software
        documentationLicense: Other
        noCommercialRestriction: true
        explanationNcr: Lorem ipsum dolor sit amet.
        noDocumentationRestriction: true
        explanationNdr: Lorem ipsum dolor sit amet.
        openHardwareComponents: true
        explanationOhwc: Lorem ipsum dolor sit amet.
        creatorContribution: true
        explanationCcr: Lorem ipsum dolor sit amet.
        noUseRestriction: true
        explanationNur: Lorem ipsum dolor sit amet.
        redistributedWork: true
        explanationRwr: Lorem ipsum dolor sit amet.
        noSpecificProduct: true
        explanationNsp: Lorem ipsum dolor sit amet.
        noComponentRestriction: true
        explanationNor: Lorem ipsum dolor sit amet.
        technologyNeutral: true
        explanationTn: Lorem ipsum dolor sit amet.
        certificationMarkTerms:
          accurateContactInformation:
            term: "I have provided OSHWA with accurate contact information, recognize\
              \ that all official communications from OSHWA will be directed to that\
              \ contact information, and will update that contact information as necessary."
            agreement: true
          complianceWithOfficialCertificationGuidelines:
            term: I will only use the certification mark in compliance with official
              certification guidelines.
            agreement: true
          oshwaCertificationMark:
            term: "I acknowledge that all right, title, and interest in the certification\
              \ mark remains with OSHWA."
            agreement: true
          violationsEnforcement:
            term: I acknowledge that OSHWA has the right to enforce violations of
              the use of the mark. This enforcement may involve financial penalties
              for misuse in bad faith.
            agreement: true
          responsibility:
            term: I have the ability to bind those responsible for the certified item
              to this agreement.
            agreement: true
        explanationCertificationTerms: Lorem ipsum dolor sit amet.
        relationship: self
        agreementTerms: true
        parentName: J Doe
      properties:
        responsiblePartyType:
          description: "Responsible party type. Must be either \"Individual\", \"\
            Company\", or \"Organization\". Required."
          type: string
        responsibleParty:
          description: "Name of Individual, Company, or Organization Responsible for\
            \ the Certified Item. Required."
          type: string
        bindingParty:
          description: "If not an Individual, name of Individual with Authority to\
            \ Bind the Company or Organization. Required only if responsiblePartyType\
            \ is not \"Individual\"."
          type: string
        country:
          type: string
        streetAddress1:
          type: string
        streetAddress2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        privateContact:
          format: email
          type: string
        publicContact:
          format: email
          type: string
        projectName:
          type: string
        projectWebsite:
          type: string
        projectVersion:
          description: e.g. 1.0
          type: string
        previousVersions:
          description: An array of OSHWA UIDs
          items:
            type: string
          type: array
        projectDescription:
          type: string
        primaryType:
          description: Primary project type. The GET api/options endpoint provides
            all valid options.
          type: string
        additionalType:
          description: Additional project types. The GET api/options endpoint provides
            all valid options.
          items:
            type: string
          type: array
        projectKeywords:
          description: Additional searchable keywords
          items:
            type: string
          type: array
        citations:
          description: "If the project incorporates or builds upon other open projects\
            \ that are not currently certified by OSHWA, this field can be used to\
            \ cite those projects."
          items:
            $ref: '#/components/schemas/Project_citations_inner'
          type: array
        documentationUrl:
          description: URL for project documentation
          type: string
        availableFileFormat:
          description: All project documentation and design files are available in
            the preferred format for making changes.
          type: boolean
        hardwareLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        softwareLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        documentationLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        noCommercialRestriction:
          description: The project is licensed in a way to allow for modifications
            and derivative works without commercial restriction.
          type: string
        explanationNcr:
          description: Explanation is required if noCommercialRestriction is false.
          type: string
        noDocumentationRestriction:
          description: There is no restriction within my control to selling or giving
            away the project documentation.
          type: boolean
        explanationNdr:
          description: Explanation is required if noDocumentationRestriction is false.
          type: string
        openHardwareComponents:
          description: "Where possible, I have chosen to use components in my hardware\
            \ that are openly licensed."
          type: boolean
        explanationOhwc:
          description: Explanation is required if openHardwareComponents is false.
          type: string
        creatorContribution:
          description: "I understand and comply with the \"Creator Contribution requirement,\"\
            \ explained in the Requirements for Certification."
          type: boolean
        explanationCcr:
          description: Explanation is required if creatorContribution is false.
          type: string
        noUseRestriction:
          description: "There is no restriction on the use by persons or groups, or\
            \ by the field of endeavor."
          type: boolean
        explanationNur:
          description: Explanation is required if noUseRestriction is false.
          type: string
        redistributedWork:
          description: The rights granted by any license on the project applies to
            all whom the work is redistributed to.
          type: boolean
        explanationRwr:
          description: Explanation is required if redistributedWork is false.
          type: string
        noSpecificProduct:
          description: The rights granted under any license on the project do not
            depend on the licensed work being part of a specific product.
          type: boolean
        explanationNsp:
          description: Explanation is required if noSpecificProduct is false.
          type: string
        noComponentRestriction:
          description: "The rights granted under any license on the project do not\
            \ restrict other hardware or software, for example by requiring that all\
            \ other hardware or software sold with the item be open source."
          type: boolean
        explanationNor:
          description: Explanation is required if noComponentRestriction is false.
          type: string
        technologyNeutral:
          description: The rights granted under any license on the project are technology
            neutral.
          type: boolean
        explanationTn:
          description: Explanation is required if technologyNeutral is false.
          type: string
        certificationMarkTerms:
          $ref: '#/components/schemas/Project_certificationMarkTerms'
        explanationCertificationTerms:
          description: Explanation for certification mark terms
          type: string
        relationship:
          description: Relationship
          type: string
        agreementTerms:
          description: Agreement to terms
          type: boolean
        parentName:
          description: Parent name
          type: string
      required:
      - agreementTerms
      - bindingParty
      - certificationDate
      - certificationMarkTerms
      - country
      - creatorContribution
      - documentationLicense
      - explanationCcr
      - explanationCertificationTerms
      - explanationNcr
      - explanationNdr
      - explanationNor
      - explanationNsp
      - explanationNur
      - explanationOhwc
      - explanationRwr
      - explanationTn
      - hardwareLicense
      - noCommercialRestriction
      - noComponentRestriction
      - noDocumentationRestriction
      - noSpecificProduct
      - noUseRestriction
      - openHardwareComponents
      - parentName
      - primaryType
      - projectName
      - redistributedWork
      - relationship
      - responsibleParty
      - responsiblePartyType
      - softwareLicense
      - technologyNeutral
      type: object
    PublicProject:
      example:
        oshwaUid: "US000001,"
        responsibleParty: Example Company Name
        country: United States of America
        publicContact: contact@example.com
        projectName: My Open Source Project
        projectWebsite: https://example.com
        projectVersion: 1
        previousVersions:
        - US000000
        projectDescription: Open source project description
        primaryType: Electronics
        additionalType:
        - 3D Printing
        projectKeywords:
        - electronics
        citations:
        - url: https://example.com
          title: My first citation
        documentationUrl: https://example.com
        hardwareLicense: Other
        softwareLicense: No software
        documentationLicense: Other
        certificationDate: 2020-04-09T00:00-04:00
      properties:
        oshwaUid:
          description: Assigned by OSHWA admin
          type: string
        responsibleParty:
          description: "Name of Individual, Company, or Organization Responsible for\
            \ the Certified Item. Required."
          type: string
        country:
          type: string
        publicContact:
          format: email
          type: string
        projectName:
          type: string
        projectWebsite:
          type: string
        projectVersion:
          description: e.g. 1.0
          type: string
        previousVersions:
          description: An array of OSHWA UIDs
          items:
            type: string
          type: array
        projectDescription:
          type: string
        primaryType:
          description: Primary project type. The GET api/options endpoint provides
            all valid options.
          type: string
        additionalType:
          description: Additional project types. The GET api/options endpoint provides
            all valid options.
          items:
            type: string
          type: array
        projectKeywords:
          description: Additional searchable keywords
          items:
            type: string
          type: array
        citations:
          description: "If the project incorporates or builds upon other open projects\
            \ that are not currently certified by OSHWA, this field can be used to\
            \ cite those projects."
          items:
            $ref: '#/components/schemas/Project_citations_inner'
          type: array
        documentationUrl:
          description: URL for project documentation
          type: string
        hardwareLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        softwareLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        documentationLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        certificationDate:
          description: Certification date
          type: date
      type: object
    PublicProjects:
      example:
        total: 200
        offset: 0
        limit: 100
        items:
        - oshwaUid: "US000001,"
          responsibleParty: Example Company Name
          country: United States of America
          publicContact: contact@example.com
          projectName: My Open Source Project
          projectWebsite: https://example.com
          projectVersion: 1
          previousVersions:
          - US000000
          projectDescription: Open source project description
          primaryType: Electronics
          additionalType:
          - 3D Printing
          projectKeywords:
          - electronics
          citations:
          - url: https://example.com
            title: My first citation
          documentationUrl: https://example.com
          hardwareLicense: Other
          softwareLicense: No software
          documentationLicense: Other
          certificationDate: 2020-04-09T00:00-04:00
      properties:
        total:
          description: Total number of results
          type: integer
        offset:
          description: Number of results skipped
          type: integer
        limit:
          description: Number of results per request
          type: integer
        items:
          description: List of results
          items:
            $ref: '#/components/schemas/PublicProjects_items_inner'
          type: array
      type: object
    ApiError:
      example:
        error:
          statusCode: 422
          errorCode: Unprocessable Entity
          message: There was something wrong with the request. Please see the error
            details for more information.
          details:
          - msg: Hardware license is required
          - param: hardwareLicense
          - location: body
      properties:
        error:
          $ref: '#/components/schemas/ApiError_error'
      type: object
    _users_signup_post_request:
      example:
        firstName: Jane
        lastName: Doe
        email: jane@example.com
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          format: email
          type: string
      required:
      - email
      - firstName
      - lastName
      type: object
    _users_signup_post_201_response:
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
      properties:
        token:
          type: string
      type: object
    _api_projects_post_200_response:
      example:
        success: true
        project:
          responsiblePartyType: Individual
          responsibleParty: Company Name
          bindingParty: Jane Doe
          country: United States of America
          streetAddress1: 255 Pouros Circle
          streetAddress2: Suite 123
          city: Raleigh
          state: North Carolina
          postalCode: 27616
          privateContact: jane@example.com
          publicContact: jane.doe@example.com
          projectName: My Open Source Project
          projectWebsite: https://example.com
          projectVersion: 1
          previousVersions:
          - US000000
          projectDescription: Open source project description
          primaryType: Electronics
          additionalType:
          - 3D Printing
          projectKeywords:
          - electronics
          citations:
          - url: https://example.com
            title: My first citation
          documentationUrl: https://example.com
          availableFileFormat: true
          hardwareLicense: Other
          softwareLicense: No software
          documentationLicense: Other
          noCommercialRestriction: true
          explanationNcr: Lorem ipsum dolor sit amet.
          noDocumentationRestriction: true
          explanationNdr: Lorem ipsum dolor sit amet.
          openHardwareComponents: true
          explanationOhwc: Lorem ipsum dolor sit amet.
          creatorContribution: true
          explanationCcr: Lorem ipsum dolor sit amet.
          noUseRestriction: true
          explanationNur: Lorem ipsum dolor sit amet.
          redistributedWork: true
          explanationRwr: Lorem ipsum dolor sit amet.
          noSpecificProduct: true
          explanationNsp: Lorem ipsum dolor sit amet.
          noComponentRestriction: true
          explanationNor: Lorem ipsum dolor sit amet.
          technologyNeutral: true
          explanationTn: Lorem ipsum dolor sit amet.
          certificationMarkTerms:
            accurateContactInformation:
              term: "I have provided OSHWA with accurate contact information, recognize\
                \ that all official communications from OSHWA will be directed to\
                \ that contact information, and will update that contact information\
                \ as necessary."
              agreement: true
            complianceWithOfficialCertificationGuidelines:
              term: I will only use the certification mark in compliance with official
                certification guidelines.
              agreement: true
            oshwaCertificationMark:
              term: "I acknowledge that all right, title, and interest in the certification\
                \ mark remains with OSHWA."
              agreement: true
            violationsEnforcement:
              term: I acknowledge that OSHWA has the right to enforce violations of
                the use of the mark. This enforcement may involve financial penalties
                for misuse in bad faith.
              agreement: true
            responsibility:
              term: I have the ability to bind those responsible for the certified
                item to this agreement.
              agreement: true
          explanationCertificationTerms: Lorem ipsum dolor sit amet.
          relationship: self
          agreementTerms: true
          parentName: J Doe
      properties:
        success:
          type: boolean
        project:
          $ref: '#/components/schemas/Project'
      type: object
    _api_options_get_200_response:
      example:
        countryOptions:
        - Afghanistan
        - Albania
        - Algeria
        responsiblePartyTypeOptions:
        - Individaual
        - Company
        - Organization
        primaryTypeOptions:
        - 3D Printing
        - Agriculture
        - Arts
        additionalTypeOptions:
        - 3D Printing
        - Agriculture
        - Arts
        hardwareLicenseOptions:
        - CERN
        - Solderpad
        softwareLicenseOptions:
        - Apache
        - GPL
        documentationLicenseOptions:
        - CC 0
        - CC BY
      properties:
        countryOptions:
          items:
            type: string
          type: array
        responsiblePartyTypeOptions:
          items:
            type: string
          type: array
        primaryTypeOptions:
          items:
            type: string
          type: array
        additionalTypeOptions:
          items:
            type: string
          type: array
        hardwareLicenseOptions:
          items:
            type: string
          type: array
        softwareLicenseOptions:
          items:
            type: string
          type: array
        documentationLicenseOptions:
          items:
            type: string
          type: array
      type: object
    Project_citations_inner:
      properties:
        title:
          type: string
        url:
          type: string
      type: object
    Project_certificationMarkTerms_accurateContactInformation:
      description: "I have provided OSHWA with accurate contact information, recognize\
        \ that all official communications from OSHWA will be directed to that contact\
        \ information, and will update that contact information as necessary."
      properties:
        agreement:
          type: boolean
      type: object
    Project_certificationMarkTerms_complianceWithOfficialCertificationGuidelines:
      description: I will only use the certification mark in compliance with official
        certification guidelines.
      properties:
        agreement:
          type: boolean
      type: object
    Project_certificationMarkTerms_oshwaCertificationMark:
      description: "I acknowledge that all right, title, and interest in the certification\
        \ mark remains with OSHWA."
      properties:
        agreement:
          type: boolean
      type: object
    Project_certificationMarkTerms_violationsEnforcement:
      description: I acknowledge that OSHWA has the right to enforce violations of
        the use of the mark. This enforcement may involve financial penalties for
        misuse in bad faith.
      properties:
        agreement:
          type: boolean
      type: object
    Project_certificationMarkTerms_responsibility:
      description: I have the ability to bind those responsible for the certified
        item to this agreement.
      properties:
        agreement:
          type: boolean
      type: object
    Project_certificationMarkTerms:
      description: Certification Mark Terms
      properties:
        accurateContactInformation:
          $ref: '#/components/schemas/Project_certificationMarkTerms_accurateContactInformation'
        complianceWithOfficialCertificationGuidelines:
          $ref: '#/components/schemas/Project_certificationMarkTerms_complianceWithOfficialCertificationGuidelines'
        oshwaCertificationMark:
          $ref: '#/components/schemas/Project_certificationMarkTerms_oshwaCertificationMark'
        violationsEnforcement:
          $ref: '#/components/schemas/Project_certificationMarkTerms_violationsEnforcement'
        responsibility:
          $ref: '#/components/schemas/Project_certificationMarkTerms_responsibility'
      type: object
    PublicProjects_items_inner:
      properties:
        oshwaUid:
          description: Assigned by OSHWA admin
          type: string
        responsibleParty:
          description: "Name of Individual, Company, or Organization Responsible for\
            \ the Certified Item. Required."
          type: string
        country:
          type: string
        publicContact:
          format: email
          type: string
        projectName:
          type: string
        projectWebsite:
          type: string
        projectVersion:
          description: e.g. 1.0
          type: string
        previousVersions:
          description: An array of OSHWA UIDs
          items:
            type: string
          type: array
        projectDescription:
          type: string
        primaryType:
          description: Primary project type. The GET api/options endpoint provides
            all valid options.
          type: string
        additionalType:
          description: Additional project types. The GET api/options endpoint provides
            all valid options.
          items:
            type: string
          type: array
        projectKeywords:
          description: Additional searchable keywords
          items:
            type: string
          type: array
        citations:
          description: "If the project incorporates or builds upon other open projects\
            \ that are not currently certified by OSHWA, this field can be used to\
            \ cite those projects."
          items:
            $ref: '#/components/schemas/Project_citations_inner'
          type: array
        documentationUrl:
          description: URL for project documentation
          type: string
        hardwareLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        softwareLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        documentationLicense:
          description: The GET api/options endpoint provides all valid options.
          type: string
        certificationDate:
          description: Certification date
          type: date
      type: object
    ApiError_error_details_inner:
      properties:
        msg:
          type: string
        param:
          type: string
        location:
          type: string
        name:
          type: string
        value:
          type: string
        type:
          type: string
        details:
          type: string
        path:
          items:
            type: string
          type: array
      type: object
    ApiError_error:
      properties:
        statusCode:
          type: string
        errorCode:
          type: string
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ApiError_error_details_inner'
          type: array
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
